<?php
/**
 * RealtimeApi
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace client.api;

use \Rakam\Configuration;
use \Rakam\ApiClient;
use \Rakam\ApiException;
use \Rakam\ObjectSerializer;

/**
 * RealtimeApi Class Doc Comment
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RealtimeApi
{

    /**
     * API Client
     * @var \Rakam\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Rakam\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://app.getrakam.com/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Rakam\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Rakam\ApiClient $apiClient set the API client
     * @return RealtimeApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * create
     *
     * Create report
     *
     * @param string $project  (optional)
     * @param string $name  (optional)
     * @param string $aggregation  (optional)
     * @param string $table_name  (optional)
     * @param string[] $collections  (optional)
     * @param string $filter  (optional)
     * @param string $measure  (optional)
     * @param string[] $dimensions  (optional)
     * @return \client.model\JsonResponse
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function create($project=null, $name=null, $aggregation=null, $table_name=null, $collections=null, $filter=null, $measure=null, $dimensions=null)
    {
        
  
        // parse inputs
        $resourcePath = "/realtime/create";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // form params
        if ($project !== null) {
            $formParams['project'] = $this->apiClient->getSerializer()->toFormValue($project);
        }// form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }// form params
        if ($aggregation !== null) {
            $formParams['aggregation'] = $this->apiClient->getSerializer()->toFormValue($aggregation);
        }// form params
        if ($table_name !== null) {
            $formParams['table_name'] = $this->apiClient->getSerializer()->toFormValue($table_name);
        }// form params
        if ($collections !== null) {
            $formParams['collections'] = $this->apiClient->getSerializer()->toFormValue($collections);
        }// form params
        if ($filter !== null) {
            $formParams['filter'] = $this->apiClient->getSerializer()->toFormValue($filter);
        }// form params
        if ($measure !== null) {
            $formParams['measure'] = $this->apiClient->getSerializer()->toFormValue($measure);
        }// form params
        if ($dimensions !== null) {
            $formParams['dimensions'] = $this->apiClient->getSerializer()->toFormValue($dimensions);
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (isset($apiKey)) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\JsonResponse'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, '\client.model\JsonResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\JsonResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * delete
     *
     * Delete report
     *
     * @param string $project  (optional)
     * @param string $name  (optional)
     * @return \client.model\JsonResponse
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function delete($project=null, $name=null)
    {
        
  
        // parse inputs
        $resourcePath = "/realtime/delete";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // form params
        if ($project !== null) {
            $formParams['project'] = $this->apiClient->getSerializer()->toFormValue($project);
        }// form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (isset($apiKey)) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\JsonResponse'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, '\client.model\JsonResponse', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\JsonResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * get
     *
     * Get report
     *
     * @param string $project  (optional)
     * @param string $table_name  (optional)
     * @param string $filter  (optional)
     * @param string $aggregation  (optional)
     * @param string $measure  (optional)
     * @param string[] $dimensions  (optional)
     * @param bool $aggregate  (optional)
     * @param \DateTime $date_start  (optional)
     * @param \DateTime $date_end  (optional)
     * @return object
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function get($project=null, $table_name=null, $filter=null, $aggregation=null, $measure=null, $dimensions=null, $aggregate=null, $date_start=null, $date_end=null)
    {
        
  
        // parse inputs
        $resourcePath = "/realtime/get";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // form params
        if ($project !== null) {
            $formParams['project'] = $this->apiClient->getSerializer()->toFormValue($project);
        }// form params
        if ($table_name !== null) {
            $formParams['table_name'] = $this->apiClient->getSerializer()->toFormValue($table_name);
        }// form params
        if ($filter !== null) {
            $formParams['filter'] = $this->apiClient->getSerializer()->toFormValue($filter);
        }// form params
        if ($aggregation !== null) {
            $formParams['aggregation'] = $this->apiClient->getSerializer()->toFormValue($aggregation);
        }// form params
        if ($measure !== null) {
            $formParams['measure'] = $this->apiClient->getSerializer()->toFormValue($measure);
        }// form params
        if ($dimensions !== null) {
            $formParams['dimensions'] = $this->apiClient->getSerializer()->toFormValue($dimensions);
        }// form params
        if ($aggregate !== null) {
            $formParams['aggregate'] = $this->apiClient->getSerializer()->toFormValue($aggregate);
        }// form params
        if ($date_start !== null) {
            $formParams['date_start'] = $this->apiClient->getSerializer()->toFormValue($date_start);
        }// form params
        if ($date_end !== null) {
            $formParams['date_end'] = $this->apiClient->getSerializer()->toFormValue($date_end);
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (isset($apiKey)) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * listReports
     *
     * List reports
     *
     * @param string $project  (optional)
     * @return \client.model\RealTimeReport[]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function listReports($project=null)
    {
        
  
        // parse inputs
        $resourcePath = "/realtime/list";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // form params
        if ($project !== null) {
            $formParams['project'] = $this->apiClient->getSerializer()->toFormValue($project);
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (isset($apiKey)) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\RealTimeReport[]'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, '\client.model\RealTimeReport[]', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\RealTimeReport[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
}
