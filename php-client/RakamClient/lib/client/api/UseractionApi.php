<?php
/**
 * UseractionApi
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace client.api;

use \Rakam\Configuration;
use \Rakam\ApiClient;
use \Rakam\ApiException;
use \Rakam\ObjectSerializer;

/**
 * UseractionApi Class Doc Comment
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UseractionApi
{

    /**
     * API Client
     * @var \Rakam\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Rakam\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.rakam.io/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Rakam\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Rakam\ApiClient $apiClient set the API client
     * @return UseractionApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * userEmailActionBatch
     *
     * Apply batch operation
     *
     * @param \client.model\UserEmailActionBatch $user_email_action_batch  (required)
     * @return int
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userEmailActionBatch($user_email_action_batch)
    {
        list($response, $statusCode, $httpHeader) = $this->userEmailActionBatchWithHttpInfo ($user_email_action_batch);
        return $response; 
    }


    /**
     * userEmailActionBatchWithHttpInfo
     *
     * Apply batch operation
     *
     * @param \client.model\UserEmailActionBatch $user_email_action_batch  (required)
     * @return Array of int, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userEmailActionBatchWithHttpInfo($user_email_action_batch)
    {
        
        // verify the required parameter 'user_email_action_batch' is set
        if ($user_email_action_batch === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_email_action_batch when calling userEmailActionBatch');
        }
  
        // parse inputs
        $resourcePath = "/user/action/email/batch";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($user_email_action_batch)) {
            $_tempBody = $user_email_action_batch;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'int'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userEmailActionSend
     *
     * Perform action for single user
     *
     * @param \client.model\UserEmailActionSend $user_email_action_send  (required)
     * @return bool
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userEmailActionSend($user_email_action_send)
    {
        list($response, $statusCode, $httpHeader) = $this->userEmailActionSendWithHttpInfo ($user_email_action_send);
        return $response; 
    }


    /**
     * userEmailActionSendWithHttpInfo
     *
     * Perform action for single user
     *
     * @param \client.model\UserEmailActionSend $user_email_action_send  (required)
     * @return Array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userEmailActionSendWithHttpInfo($user_email_action_send)
    {
        
        // verify the required parameter 'user_email_action_send' is set
        if ($user_email_action_send === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_email_action_send when calling userEmailActionSend');
        }
  
        // parse inputs
        $resourcePath = "/user/action/email/single";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($user_email_action_send)) {
            $_tempBody = $user_email_action_send;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'bool'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userMailboxActionSend
     *
     * Send message to user
     *
     * @param string $project  (optional)
     * @param string $from_user  (optional)
     * @param string $to_user  (optional)
     * @param int $parent  (optional)
     * @param string $message  (optional)
     * @param int $timestamp  (optional)
     * @return \client.model\Message
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userMailboxActionSend($project = null, $from_user = null, $to_user = null, $parent = null, $message = null, $timestamp = null)
    {
        list($response, $statusCode, $httpHeader) = $this->userMailboxActionSendWithHttpInfo ($project, $from_user, $to_user, $parent, $message, $timestamp);
        return $response; 
    }


    /**
     * userMailboxActionSendWithHttpInfo
     *
     * Send message to user
     *
     * @param string $project  (optional)
     * @param string $from_user  (optional)
     * @param string $to_user  (optional)
     * @param int $parent  (optional)
     * @param string $message  (optional)
     * @param int $timestamp  (optional)
     * @return Array of \client.model\Message, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userMailboxActionSendWithHttpInfo($project = null, $from_user = null, $to_user = null, $parent = null, $message = null, $timestamp = null)
    {
        
  
        // parse inputs
        $resourcePath = "/user/action/mailbox/action/mailbox/single";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // form params
        if ($project !== null) {
            
            
            $formParams['project'] = $this->apiClient->getSerializer()->toFormValue($project);
            
        }// form params
        if ($from_user !== null) {
            
            
            $formParams['from_user'] = $this->apiClient->getSerializer()->toFormValue($from_user);
            
        }// form params
        if ($to_user !== null) {
            
            
            $formParams['to_user'] = $this->apiClient->getSerializer()->toFormValue($to_user);
            
        }// form params
        if ($parent !== null) {
            
            
            $formParams['parent'] = $this->apiClient->getSerializer()->toFormValue($parent);
            
        }// form params
        if ($message !== null) {
            
            
            $formParams['message'] = $this->apiClient->getSerializer()->toFormValue($message);
            
        }// form params
        if ($timestamp !== null) {
            
            
            $formParams['timestamp'] = $this->apiClient->getSerializer()->toFormValue($timestamp);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('write_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['write_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\Message'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\Message', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\Message', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userMailboxActionBatchSendMessages
     *
     * Apply batch operation
     *
     * @param \client.model\UserMailboxActionBatchSendMessages $user_mailbox_action_batch_send_messages  (required)
     * @return int
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userMailboxActionBatchSendMessages($user_mailbox_action_batch_send_messages)
    {
        list($response, $statusCode, $httpHeader) = $this->userMailboxActionBatchSendMessagesWithHttpInfo ($user_mailbox_action_batch_send_messages);
        return $response; 
    }


    /**
     * userMailboxActionBatchSendMessagesWithHttpInfo
     *
     * Apply batch operation
     *
     * @param \client.model\UserMailboxActionBatchSendMessages $user_mailbox_action_batch_send_messages  (required)
     * @return Array of int, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userMailboxActionBatchSendMessagesWithHttpInfo($user_mailbox_action_batch_send_messages)
    {
        
        // verify the required parameter 'user_mailbox_action_batch_send_messages' is set
        if ($user_mailbox_action_batch_send_messages === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_mailbox_action_batch_send_messages when calling userMailboxActionBatchSendMessages');
        }
  
        // parse inputs
        $resourcePath = "/user/action/mailbox/batch";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($user_mailbox_action_batch_send_messages)) {
            $_tempBody = $user_mailbox_action_batch_send_messages;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'int'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
