<?php
/**
 * UserApi
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace client.api;

use \Rakam\Configuration;
use \Rakam\ApiClient;
use \Rakam\ApiException;
use \Rakam\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserApi
{

    /**
     * API Client
     * @var \Rakam\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Rakam\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.rakam.io/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Rakam\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Rakam\ApiClient $apiClient set the API client
     * @return UserApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * userBatchCreate
     *
     * Create new user
     *
     * @param \client.model\UserBatchCreate $user_batch_create  (required)
     * @return string[]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userBatchCreate($user_batch_create)
    {
        list($response, $statusCode, $httpHeader) = $this->userBatchCreateWithHttpInfo ($user_batch_create);
        return $response; 
    }


    /**
     * userBatchCreateWithHttpInfo
     *
     * Create new user
     *
     * @param \client.model\UserBatchCreate $user_batch_create  (required)
     * @return Array of string[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userBatchCreateWithHttpInfo($user_batch_create)
    {
        
        // verify the required parameter 'user_batch_create' is set
        if ($user_batch_create === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_batch_create when calling userBatchCreate');
        }
  
        // parse inputs
        $resourcePath = "/user/batch/create";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($user_batch_create)) {
            $_tempBody = $user_batch_create;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'string[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userCreate
     *
     * Create new user
     *
     * @param \client.model\User $user  (required)
     * @return string
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userCreate($user)
    {
        list($response, $statusCode, $httpHeader) = $this->userCreateWithHttpInfo ($user);
        return $response; 
    }


    /**
     * userCreateWithHttpInfo
     *
     * Create new user
     *
     * @param \client.model\User $user  (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userCreateWithHttpInfo($user)
    {
        
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling userCreate');
        }
  
        // parse inputs
        $resourcePath = "/user/create";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userCreateSegment
     *
     * Get events of the user
     *
     * @param \client.model\UserCreateSegment $user_create_segment  (required)
     * @return \client.model\JsonResponse
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userCreateSegment($user_create_segment)
    {
        list($response, $statusCode, $httpHeader) = $this->userCreateSegmentWithHttpInfo ($user_create_segment);
        return $response; 
    }


    /**
     * userCreateSegmentWithHttpInfo
     *
     * Get events of the user
     *
     * @param \client.model\UserCreateSegment $user_create_segment  (required)
     * @return Array of \client.model\JsonResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userCreateSegmentWithHttpInfo($user_create_segment)
    {
        
        // verify the required parameter 'user_create_segment' is set
        if ($user_create_segment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_create_segment when calling userCreateSegment');
        }
  
        // parse inputs
        $resourcePath = "/user/create_segment";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($user_create_segment)) {
            $_tempBody = $user_create_segment;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\JsonResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\JsonResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\JsonResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userGetUser
     *
     * Get user
     *
     * @param string $project  (optional)
     * @param string $user  (optional)
     * @return \client.model\User
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userGetUser($project = null, $user = null)
    {
        list($response, $statusCode, $httpHeader) = $this->userGetUserWithHttpInfo ($project, $user);
        return $response; 
    }


    /**
     * userGetUserWithHttpInfo
     *
     * Get user
     *
     * @param string $project  (optional)
     * @param string $user  (optional)
     * @return Array of \client.model\User, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userGetUserWithHttpInfo($project = null, $user = null)
    {
        
  
        // parse inputs
        $resourcePath = "/user/get";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // form params
        if ($project !== null) {
            
            
            $formParams['project'] = $this->apiClient->getSerializer()->toFormValue($project);
            
        }// form params
        if ($user !== null) {
            
            
            $formParams['user'] = $this->apiClient->getSerializer()->toFormValue($user);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\User'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\User', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\User', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userGetEvents
     *
     * Get events of the user
     *
     * @param string $project  (optional)
     * @param string $user  (optional)
     * @param int $limit  (optional)
     * @param \DateTime $offset  (optional)
     * @return \client.model\CollectionEvent[]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userGetEvents($project = null, $user = null, $limit = null, $offset = null)
    {
        list($response, $statusCode, $httpHeader) = $this->userGetEventsWithHttpInfo ($project, $user, $limit, $offset);
        return $response; 
    }


    /**
     * userGetEventsWithHttpInfo
     *
     * Get events of the user
     *
     * @param string $project  (optional)
     * @param string $user  (optional)
     * @param int $limit  (optional)
     * @param \DateTime $offset  (optional)
     * @return Array of \client.model\CollectionEvent[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userGetEventsWithHttpInfo($project = null, $user = null, $limit = null, $offset = null)
    {
        
  
        // parse inputs
        $resourcePath = "/user/get_events";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // form params
        if ($project !== null) {
            
            
            $formParams['project'] = $this->apiClient->getSerializer()->toFormValue($project);
            
        }// form params
        if ($user !== null) {
            
            
            $formParams['user'] = $this->apiClient->getSerializer()->toFormValue($user);
            
        }// form params
        if ($limit !== null) {
            
            
            $formParams['limit'] = $this->apiClient->getSerializer()->toFormValue($limit);
            
        }// form params
        if ($offset !== null) {
            
            
            $formParams['offset'] = $this->apiClient->getSerializer()->toFormValue($offset);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\CollectionEvent[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\CollectionEvent[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\CollectionEvent[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userIncrementProperty
     *
     * Set user property
     *
     * @param \client.model\UserIncrementProperty $user_increment_property  (required)
     * @return \client.model\JsonResponse
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userIncrementProperty($user_increment_property)
    {
        list($response, $statusCode, $httpHeader) = $this->userIncrementPropertyWithHttpInfo ($user_increment_property);
        return $response; 
    }


    /**
     * userIncrementPropertyWithHttpInfo
     *
     * Set user property
     *
     * @param \client.model\UserIncrementProperty $user_increment_property  (required)
     * @return Array of \client.model\JsonResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userIncrementPropertyWithHttpInfo($user_increment_property)
    {
        
        // verify the required parameter 'user_increment_property' is set
        if ($user_increment_property === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_increment_property when calling userIncrementProperty');
        }
  
        // parse inputs
        $resourcePath = "/user/increment_property";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($user_increment_property)) {
            $_tempBody = $user_increment_property;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\JsonResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\JsonResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\JsonResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userMergeUser
     *
     * Merge user with anonymous id
     *
     * @param \client.model\UserMergeUser $user_merge_user  (required)
     * @return bool
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userMergeUser($user_merge_user)
    {
        list($response, $statusCode, $httpHeader) = $this->userMergeUserWithHttpInfo ($user_merge_user);
        return $response; 
    }


    /**
     * userMergeUserWithHttpInfo
     *
     * Merge user with anonymous id
     *
     * @param \client.model\UserMergeUser $user_merge_user  (required)
     * @return Array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userMergeUserWithHttpInfo($user_merge_user)
    {
        
        // verify the required parameter 'user_merge_user' is set
        if ($user_merge_user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_merge_user when calling userMergeUser');
        }
  
        // parse inputs
        $resourcePath = "/user/merge";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($user_merge_user)) {
            $_tempBody = $user_merge_user;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'bool'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userGetMetadata
     *
     * Get user storage metadata
     *
     * @param string $project  (optional)
     * @return \client.model\MetadataResponse
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userGetMetadata($project = null)
    {
        list($response, $statusCode, $httpHeader) = $this->userGetMetadataWithHttpInfo ($project);
        return $response; 
    }


    /**
     * userGetMetadataWithHttpInfo
     *
     * Get user storage metadata
     *
     * @param string $project  (optional)
     * @return Array of \client.model\MetadataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userGetMetadataWithHttpInfo($project = null)
    {
        
  
        // parse inputs
        $resourcePath = "/user/metadata";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // form params
        if ($project !== null) {
            
            
            $formParams['project'] = $this->apiClient->getSerializer()->toFormValue($project);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\MetadataResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\MetadataResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\MetadataResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userSearchUsers
     *
     * Search users
     *
     * @param \client.model\UserSearchUsers $user_search_users  (required)
     * @return \client.model\QueryResult
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userSearchUsers($user_search_users)
    {
        list($response, $statusCode, $httpHeader) = $this->userSearchUsersWithHttpInfo ($user_search_users);
        return $response; 
    }


    /**
     * userSearchUsersWithHttpInfo
     *
     * Search users
     *
     * @param \client.model\UserSearchUsers $user_search_users  (required)
     * @return Array of \client.model\QueryResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userSearchUsersWithHttpInfo($user_search_users)
    {
        
        // verify the required parameter 'user_search_users' is set
        if ($user_search_users === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_search_users when calling userSearchUsers');
        }
  
        // parse inputs
        $resourcePath = "/user/search";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($user_search_users)) {
            $_tempBody = $user_search_users;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\QueryResult'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\QueryResult', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\QueryResult', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userSetProperties
     *
     * Set user properties
     *
     * @param \client.model\SetUserProperties $set_user_properties  (required)
     * @return int
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userSetProperties($set_user_properties)
    {
        list($response, $statusCode, $httpHeader) = $this->userSetPropertiesWithHttpInfo ($set_user_properties);
        return $response; 
    }


    /**
     * userSetPropertiesWithHttpInfo
     *
     * Set user properties
     *
     * @param \client.model\SetUserProperties $set_user_properties  (required)
     * @return Array of int, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userSetPropertiesWithHttpInfo($set_user_properties)
    {
        
        // verify the required parameter 'set_user_properties' is set
        if ($set_user_properties === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set_user_properties when calling userSetProperties');
        }
  
        // parse inputs
        $resourcePath = "/user/set_properties";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($set_user_properties)) {
            $_tempBody = $set_user_properties;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'int'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userSetPropertiesOnce
     *
     * Set user properties once
     *
     * @param \client.model\SetUserProperties $set_user_properties  (required)
     * @return void
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userSetPropertiesOnce($set_user_properties)
    {
        list($response, $statusCode, $httpHeader) = $this->userSetPropertiesOnceWithHttpInfo ($set_user_properties);
        return $response; 
    }


    /**
     * userSetPropertiesOnceWithHttpInfo
     *
     * Set user properties once
     *
     * @param \client.model\SetUserProperties $set_user_properties  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userSetPropertiesOnceWithHttpInfo($set_user_properties)
    {
        
        // verify the required parameter 'set_user_properties' is set
        if ($set_user_properties === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set_user_properties when calling userSetPropertiesOnce');
        }
  
        // parse inputs
        $resourcePath = "/user/set_properties_once";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($set_user_properties)) {
            $_tempBody = $set_user_properties;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * userUnsetProperty
     *
     * Unset user property
     *
     * @param \client.model\UserUnsetProperty $user_unset_property  (required)
     * @return \client.model\JsonResponse
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userUnsetProperty($user_unset_property)
    {
        list($response, $statusCode, $httpHeader) = $this->userUnsetPropertyWithHttpInfo ($user_unset_property);
        return $response; 
    }


    /**
     * userUnsetPropertyWithHttpInfo
     *
     * Unset user property
     *
     * @param \client.model\UserUnsetProperty $user_unset_property  (required)
     * @return Array of \client.model\JsonResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function userUnsetPropertyWithHttpInfo($user_unset_property)
    {
        
        // verify the required parameter 'user_unset_property' is set
        if ($user_unset_property === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_unset_property when calling userUnsetProperty');
        }
  
        // parse inputs
        $resourcePath = "/user/unset_properties";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($user_unset_property)) {
            $_tempBody = $user_unset_property;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\JsonResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\JsonResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\JsonResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
