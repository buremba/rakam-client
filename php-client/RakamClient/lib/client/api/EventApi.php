<?php
/**
 * EventApi
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace client.api;

use \Rakam\Configuration;
use \Rakam\ApiClient;
use \Rakam\ApiException;
use \Rakam\ObjectSerializer;

/**
 * EventApi Class Doc Comment
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventApi
{

    /**
     * API Client
     * @var \Rakam\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Rakam\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.rakam.io/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Rakam\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Rakam\ApiClient $apiClient set the API client
     * @return EventApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * collectEventBatchEvents
     *
     * Collect multiple events
     *
     * @param \client.model\EventList $event_list  (required)
     * @return int
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function collectEventBatchEvents($event_list)
    {
        list($response, $statusCode, $httpHeader) = $this->collectEventBatchEventsWithHttpInfo ($event_list);
        return $response; 
    }


    /**
     * collectEventBatchEventsWithHttpInfo
     *
     * Collect multiple events
     *
     * @param \client.model\EventList $event_list  (required)
     * @return Array of int, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function collectEventBatchEventsWithHttpInfo($event_list)
    {
        
        // verify the required parameter 'event_list' is set
        if ($event_list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_list when calling collectEventBatchEvents');
        }
  
        // parse inputs
        $resourcePath = "/event/batch";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($event_list)) {
            $_tempBody = $event_list;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('write_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['write_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'int'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * collectEventBulkEvents
     *
     * Send Bulk events
     *
     * @param \client.model\EventList $event_list  (required)
     * @return int
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function collectEventBulkEvents($event_list)
    {
        list($response, $statusCode, $httpHeader) = $this->collectEventBulkEventsWithHttpInfo ($event_list);
        return $response; 
    }


    /**
     * collectEventBulkEventsWithHttpInfo
     *
     * Send Bulk events
     *
     * @param \client.model\EventList $event_list  (required)
     * @return Array of int, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function collectEventBulkEventsWithHttpInfo($event_list)
    {
        
        // verify the required parameter 'event_list' is set
        if ($event_list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_list when calling collectEventBulkEvents');
        }
  
        // parse inputs
        $resourcePath = "/event/bulk";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($event_list)) {
            $_tempBody = $event_list;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('master_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['master_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'int'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * collectEventCommitBulkEvents
     *
     * Commit Bulk events
     *
     * @param string $project  (optional)
     * @param string $collection  (optional)
     * @return \client.model\QueryResult
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function collectEventCommitBulkEvents($project = null, $collection = null)
    {
        list($response, $statusCode, $httpHeader) = $this->collectEventCommitBulkEventsWithHttpInfo ($project, $collection);
        return $response; 
    }


    /**
     * collectEventCommitBulkEventsWithHttpInfo
     *
     * Commit Bulk events
     *
     * @param string $project  (optional)
     * @param string $collection  (optional)
     * @return Array of \client.model\QueryResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function collectEventCommitBulkEventsWithHttpInfo($project = null, $collection = null)
    {
        
  
        // parse inputs
        $resourcePath = "/event/bulk/commit";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // form params
        if ($project !== null) {
            
            
            $formParams['project'] = $this->apiClient->getSerializer()->toFormValue($project);
            
        }// form params
        if ($collection !== null) {
            
            
            $formParams['collection'] = $this->apiClient->getSerializer()->toFormValue($collection);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('master_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['master_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\QueryResult'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\QueryResult', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\QueryResult', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * collectEventBulkEventsRemote
     *
     * Send Bulk events
     *
     * @param \client.model\EventList $event_list  (required)
     * @return int
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function collectEventBulkEventsRemote($event_list)
    {
        list($response, $statusCode, $httpHeader) = $this->collectEventBulkEventsRemoteWithHttpInfo ($event_list);
        return $response; 
    }


    /**
     * collectEventBulkEventsRemoteWithHttpInfo
     *
     * Send Bulk events
     *
     * @param \client.model\EventList $event_list  (required)
     * @return Array of int, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function collectEventBulkEventsRemoteWithHttpInfo($event_list)
    {
        
        // verify the required parameter 'event_list' is set
        if ($event_list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_list when calling collectEventBulkEventsRemote');
        }
  
        // parse inputs
        $resourcePath = "/event/bulk/remote";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($event_list)) {
            $_tempBody = $event_list;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('master_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['master_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'int'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * collectEventCollectEvent
     *
     * Collect event
     *
     * @param \client.model\Event $event  (required)
     * @return int
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function collectEventCollectEvent($event)
    {
        list($response, $statusCode, $httpHeader) = $this->collectEventCollectEventWithHttpInfo ($event);
        return $response; 
    }


    /**
     * collectEventCollectEventWithHttpInfo
     *
     * Collect event
     *
     * @param \client.model\Event $event  (required)
     * @return Array of int, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function collectEventCollectEventWithHttpInfo($event)
    {
        
        // verify the required parameter 'event' is set
        if ($event === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event when calling collectEventCollectEvent');
        }
  
        // parse inputs
        $resourcePath = "/event/collect";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($event)) {
            $_tempBody = $event;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('write_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['write_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'int'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * queryExecute
     *
     * Analyze events
     *
     * @param string $project  (optional)
     * @param string $query  (optional)
     * @param int $limit  (optional)
     * @return \client.model\QueryResult
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function queryExecute($project = null, $query = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->queryExecuteWithHttpInfo ($project, $query, $limit);
        return $response; 
    }


    /**
     * queryExecuteWithHttpInfo
     *
     * Analyze events
     *
     * @param string $project  (optional)
     * @param string $query  (optional)
     * @param int $limit  (optional)
     * @return Array of \client.model\QueryResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function queryExecuteWithHttpInfo($project = null, $query = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/query/execute";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // form params
        if ($project !== null) {
            
            
            $formParams['project'] = $this->apiClient->getSerializer()->toFormValue($project);
            
        }// form params
        if ($query !== null) {
            
            
            $formParams['query'] = $this->apiClient->getSerializer()->toFormValue($query);
            
        }// form params
        if ($limit !== null) {
            
            
            $formParams['limit'] = $this->apiClient->getSerializer()->toFormValue($limit);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\QueryResult'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\QueryResult', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\QueryResult', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * queryExplain
     *
     * Explain query
     *
     * @param string $query  (optional)
     * @return \client.model\InlineResponse200
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function queryExplain($query = null)
    {
        list($response, $statusCode, $httpHeader) = $this->queryExplainWithHttpInfo ($query);
        return $response; 
    }


    /**
     * queryExplainWithHttpInfo
     *
     * Explain query
     *
     * @param string $query  (optional)
     * @return Array of \client.model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function queryExplainWithHttpInfo($query = null)
    {
        
  
        // parse inputs
        $resourcePath = "/query/explain";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // form params
        if ($query !== null) {
            
            
            $formParams['query'] = $this->apiClient->getSerializer()->toFormValue($query);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * queryMetadata
     *
     * Test query
     *
     * @param string $project  (optional)
     * @param string $query  (optional)
     * @return \client.model\SchemaField[]
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function queryMetadata($project = null, $query = null)
    {
        list($response, $statusCode, $httpHeader) = $this->queryMetadataWithHttpInfo ($project, $query);
        return $response; 
    }


    /**
     * queryMetadataWithHttpInfo
     *
     * Test query
     *
     * @param string $project  (optional)
     * @param string $query  (optional)
     * @return Array of \client.model\SchemaField[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Rakam\ApiException on non-2xx response
     */
    public function queryMetadataWithHttpInfo($project = null, $query = null)
    {
        
  
        // parse inputs
        $resourcePath = "/query/metadata";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // form params
        if ($project !== null) {
            
            
            $formParams['project'] = $this->apiClient->getSerializer()->toFormValue($project);
            
        }// form params
        if ($query !== null) {
            
            
            $formParams['query'] = $this->apiClient->getSerializer()->toFormValue($query);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('read_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['read_key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\client.model\SchemaField[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\client.model\SchemaField[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\client.model\SchemaField[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
