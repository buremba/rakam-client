<?php
/**
 * ContinuousQueryBuilder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace client.model;

use \ArrayAccess;
/**
 * ContinuousQueryBuilder Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Rakam
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ContinuousQueryBuilder implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'name' => 'string',
        'query' => 'string',
        'collections' => 'string[]',
        'options' => 'map[string,object]',
        'table_name' => 'string',
        'partition_keys' => 'string[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'name' => 'name',
        'query' => 'query',
        'collections' => 'collections',
        'options' => 'options',
        'table_name' => 'tableName',
        'partition_keys' => 'partitionKeys'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'name' => 'setName',
        'query' => 'setQuery',
        'collections' => 'setCollections',
        'options' => 'setOptions',
        'table_name' => 'setTableName',
        'partition_keys' => 'setPartitionKeys'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'name' => 'getName',
        'query' => 'getQuery',
        'collections' => 'getCollections',
        'options' => 'getOptions',
        'table_name' => 'getTableName',
        'partition_keys' => 'getPartitionKeys'
    );
  
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $query 
      * @var string
      */
    protected $query;
    
    /**
      * $collections 
      * @var string[]
      */
    protected $collections;
    
    /**
      * $options 
      * @var map[string,object]
      */
    protected $options;
    
    /**
      * $table_name 
      * @var string
      */
    protected $table_name;
    
    /**
      * $partition_keys 
      * @var string[]
      */
    protected $partition_keys;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->name = $data["name"];
            $this->query = $data["query"];
            $this->collections = $data["collections"];
            $this->options = $data["options"];
            $this->table_name = $data["table_name"];
            $this->partition_keys = $data["partition_keys"];
        }
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets query
     * @return string
     */
    public function getQuery()
    {
        return $this->query;
    }
  
    /**
     * Sets query
     * @param string $query 
     * @return $this
     */
    public function setQuery($query)
    {
        
        $this->query = $query;
        return $this;
    }
    
    /**
     * Gets collections
     * @return string[]
     */
    public function getCollections()
    {
        return $this->collections;
    }
  
    /**
     * Sets collections
     * @param string[] $collections 
     * @return $this
     */
    public function setCollections($collections)
    {
        
        $this->collections = $collections;
        return $this;
    }
    
    /**
     * Gets options
     * @return map[string,object]
     */
    public function getOptions()
    {
        return $this->options;
    }
  
    /**
     * Sets options
     * @param map[string,object] $options 
     * @return $this
     */
    public function setOptions($options)
    {
        
        $this->options = $options;
        return $this;
    }
    
    /**
     * Gets table_name
     * @return string
     */
    public function getTableName()
    {
        return $this->table_name;
    }
  
    /**
     * Sets table_name
     * @param string $table_name 
     * @return $this
     */
    public function setTableName($table_name)
    {
        
        $this->table_name = $table_name;
        return $this;
    }
    
    /**
     * Gets partition_keys
     * @return string[]
     */
    public function getPartitionKeys()
    {
        return $this->partition_keys;
    }
  
    /**
     * Sets partition_keys
     * @param string[] $partition_keys 
     * @return $this
     */
    public function setPartitionKeys($partition_keys)
    {
        
        $this->partition_keys = $partition_keys;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
