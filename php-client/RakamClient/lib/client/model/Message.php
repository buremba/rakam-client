<?php
/**
 * Message
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace client.model;

use \ArrayAccess;
/**
 * Message Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Rakam
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Message implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'content' => 'string',
        'from_user' => 'object',
        'to_user' => 'object',
        'parent_id' => 'int',
        'seen' => 'bool',
        'time' => 'int',
        'project' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'content' => 'content',
        'from_user' => 'from_user',
        'to_user' => 'to_user',
        'parent_id' => 'parentId',
        'seen' => 'seen',
        'time' => 'time',
        'project' => 'project'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'content' => 'setContent',
        'from_user' => 'setFromUser',
        'to_user' => 'setToUser',
        'parent_id' => 'setParentId',
        'seen' => 'setSeen',
        'time' => 'setTime',
        'project' => 'setProject'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'content' => 'getContent',
        'from_user' => 'getFromUser',
        'to_user' => 'getToUser',
        'parent_id' => 'getParentId',
        'seen' => 'getSeen',
        'time' => 'getTime',
        'project' => 'getProject'
    );
  
    
    /**
      * $id 
      * @var int
      */
    protected $id;
    
    /**
      * $content 
      * @var string
      */
    protected $content;
    
    /**
      * $from_user 
      * @var object
      */
    protected $from_user;
    
    /**
      * $to_user 
      * @var object
      */
    protected $to_user;
    
    /**
      * $parent_id 
      * @var int
      */
    protected $parent_id;
    
    /**
      * $seen 
      * @var bool
      */
    protected $seen = false;
    
    /**
      * $time 
      * @var int
      */
    protected $time;
    
    /**
      * $project 
      * @var string
      */
    protected $project;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->content = $data["content"];
            $this->from_user = $data["from_user"];
            $this->to_user = $data["to_user"];
            $this->parent_id = $data["parent_id"];
            $this->seen = $data["seen"];
            $this->time = $data["time"];
            $this->project = $data["project"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets content
     * @return string
     */
    public function getContent()
    {
        return $this->content;
    }
  
    /**
     * Sets content
     * @param string $content 
     * @return $this
     */
    public function setContent($content)
    {
        
        $this->content = $content;
        return $this;
    }
    
    /**
     * Gets from_user
     * @return object
     */
    public function getFromUser()
    {
        return $this->from_user;
    }
  
    /**
     * Sets from_user
     * @param object $from_user 
     * @return $this
     */
    public function setFromUser($from_user)
    {
        
        $this->from_user = $from_user;
        return $this;
    }
    
    /**
     * Gets to_user
     * @return object
     */
    public function getToUser()
    {
        return $this->to_user;
    }
  
    /**
     * Sets to_user
     * @param object $to_user 
     * @return $this
     */
    public function setToUser($to_user)
    {
        
        $this->to_user = $to_user;
        return $this;
    }
    
    /**
     * Gets parent_id
     * @return int
     */
    public function getParentId()
    {
        return $this->parent_id;
    }
  
    /**
     * Sets parent_id
     * @param int $parent_id 
     * @return $this
     */
    public function setParentId($parent_id)
    {
        
        $this->parent_id = $parent_id;
        return $this;
    }
    
    /**
     * Gets seen
     * @return bool
     */
    public function getSeen()
    {
        return $this->seen;
    }
  
    /**
     * Sets seen
     * @param bool $seen 
     * @return $this
     */
    public function setSeen($seen)
    {
        
        $this->seen = $seen;
        return $this;
    }
    
    /**
     * Gets time
     * @return int
     */
    public function getTime()
    {
        return $this->time;
    }
  
    /**
     * Sets time
     * @param int $time 
     * @return $this
     */
    public function setTime($time)
    {
        
        $this->time = $time;
        return $this;
    }
    
    /**
     * Gets project
     * @return string
     */
    public function getProject()
    {
        return $this->project;
    }
  
    /**
     * Sets project
     * @param string $project 
     * @return $this
     */
    public function setProject($project)
    {
        
        $this->project = $project;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
