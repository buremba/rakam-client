<?php
/**
 * FunnelQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace client.model;

use \ArrayAccess;
/**
 * FunnelQuery Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Rakam
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FunnelQuery implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'project' => 'string',
        'connector_field' => 'string',
        'steps' => '\client.model\FunnelStep[]',
        'dimension' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'enable_other_grouping' => 'bool'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'project' => 'project',
        'connector_field' => 'connector_field',
        'steps' => 'steps',
        'dimension' => 'dimension',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'enable_other_grouping' => 'enableOtherGrouping'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'project' => 'setProject',
        'connector_field' => 'setConnectorField',
        'steps' => 'setSteps',
        'dimension' => 'setDimension',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'enable_other_grouping' => 'setEnableOtherGrouping'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'project' => 'getProject',
        'connector_field' => 'getConnectorField',
        'steps' => 'getSteps',
        'dimension' => 'getDimension',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'enable_other_grouping' => 'getEnableOtherGrouping'
    );
  
    
    /**
      * $project 
      * @var string
      */
    protected $project;
    
    /**
      * $connector_field 
      * @var string
      */
    protected $connector_field;
    
    /**
      * $steps 
      * @var \client.model\FunnelStep[]
      */
    protected $steps;
    
    /**
      * $dimension 
      * @var string
      */
    protected $dimension;
    
    /**
      * $start_date 
      * @var \DateTime
      */
    protected $start_date;
    
    /**
      * $end_date 
      * @var \DateTime
      */
    protected $end_date;
    
    /**
      * $enable_other_grouping 
      * @var bool
      */
    protected $enable_other_grouping;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->project = $data["project"];
            $this->connector_field = $data["connector_field"];
            $this->steps = $data["steps"];
            $this->dimension = $data["dimension"];
            $this->start_date = $data["start_date"];
            $this->end_date = $data["end_date"];
            $this->enable_other_grouping = $data["enable_other_grouping"];
        }
    }
    
    /**
     * Gets project
     * @return string
     */
    public function getProject()
    {
        return $this->project;
    }
  
    /**
     * Sets project
     * @param string $project 
     * @return $this
     */
    public function setProject($project)
    {
        
        $this->project = $project;
        return $this;
    }
    
    /**
     * Gets connector_field
     * @return string
     */
    public function getConnectorField()
    {
        return $this->connector_field;
    }
  
    /**
     * Sets connector_field
     * @param string $connector_field 
     * @return $this
     */
    public function setConnectorField($connector_field)
    {
        
        $this->connector_field = $connector_field;
        return $this;
    }
    
    /**
     * Gets steps
     * @return \client.model\FunnelStep[]
     */
    public function getSteps()
    {
        return $this->steps;
    }
  
    /**
     * Sets steps
     * @param \client.model\FunnelStep[] $steps 
     * @return $this
     */
    public function setSteps($steps)
    {
        
        $this->steps = $steps;
        return $this;
    }
    
    /**
     * Gets dimension
     * @return string
     */
    public function getDimension()
    {
        return $this->dimension;
    }
  
    /**
     * Sets dimension
     * @param string $dimension 
     * @return $this
     */
    public function setDimension($dimension)
    {
        
        $this->dimension = $dimension;
        return $this;
    }
    
    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->start_date;
    }
  
    /**
     * Sets start_date
     * @param \DateTime $start_date 
     * @return $this
     */
    public function setStartDate($start_date)
    {
        
        $this->start_date = $start_date;
        return $this;
    }
    
    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->end_date;
    }
  
    /**
     * Sets end_date
     * @param \DateTime $end_date 
     * @return $this
     */
    public function setEndDate($end_date)
    {
        
        $this->end_date = $end_date;
        return $this;
    }
    
    /**
     * Gets enable_other_grouping
     * @return bool
     */
    public function getEnableOtherGrouping()
    {
        return $this->enable_other_grouping;
    }
  
    /**
     * Sets enable_other_grouping
     * @param bool $enable_other_grouping 
     * @return $this
     */
    public function setEnableOtherGrouping($enable_other_grouping)
    {
        
        $this->enable_other_grouping = $enable_other_grouping;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
