<?php
/**
 * FunnelQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace client.model;

use \ArrayAccess;
/**
 * FunnelQuery Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Rakam
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FunnelQuery implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'project' => 'string',
        'steps' => '\client.model\FunnelStep[]',
        'dimension' => 'string',
        'start_date' => '\DateTime',
        'window' => '\client.model\FunnelWindow',
        'end_date' => '\DateTime'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'project' => 'project',
        'steps' => 'steps',
        'dimension' => 'dimension',
        'start_date' => 'startDate',
        'window' => 'window',
        'end_date' => 'endDate'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'project' => 'setProject',
        'steps' => 'setSteps',
        'dimension' => 'setDimension',
        'start_date' => 'setStartDate',
        'window' => 'setWindow',
        'end_date' => 'setEndDate'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'project' => 'getProject',
        'steps' => 'getSteps',
        'dimension' => 'getDimension',
        'start_date' => 'getStartDate',
        'window' => 'getWindow',
        'end_date' => 'getEndDate'
    );
  
    
    /**
      * $project 
      * @var string
      */
    protected $project;
    
    /**
      * $steps 
      * @var \client.model\FunnelStep[]
      */
    protected $steps;
    
    /**
      * $dimension 
      * @var string
      */
    protected $dimension;
    
    /**
      * $start_date 
      * @var \DateTime
      */
    protected $start_date;
    
    /**
      * $window 
      * @var \client.model\FunnelWindow
      */
    protected $window;
    
    /**
      * $end_date 
      * @var \DateTime
      */
    protected $end_date;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->project = $data["project"];
            $this->steps = $data["steps"];
            $this->dimension = $data["dimension"];
            $this->start_date = $data["start_date"];
            $this->window = $data["window"];
            $this->end_date = $data["end_date"];
        }
    }
    
    /**
     * Gets project
     * @return string
     */
    public function getProject()
    {
        return $this->project;
    }
  
    /**
     * Sets project
     * @param string $project 
     * @return $this
     */
    public function setProject($project)
    {
        
        $this->project = $project;
        return $this;
    }
    
    /**
     * Gets steps
     * @return \client.model\FunnelStep[]
     */
    public function getSteps()
    {
        return $this->steps;
    }
  
    /**
     * Sets steps
     * @param \client.model\FunnelStep[] $steps 
     * @return $this
     */
    public function setSteps($steps)
    {
        
        $this->steps = $steps;
        return $this;
    }
    
    /**
     * Gets dimension
     * @return string
     */
    public function getDimension()
    {
        return $this->dimension;
    }
  
    /**
     * Sets dimension
     * @param string $dimension 
     * @return $this
     */
    public function setDimension($dimension)
    {
        
        $this->dimension = $dimension;
        return $this;
    }
    
    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->start_date;
    }
  
    /**
     * Sets start_date
     * @param \DateTime $start_date 
     * @return $this
     */
    public function setStartDate($start_date)
    {
        
        $this->start_date = $start_date;
        return $this;
    }
    
    /**
     * Gets window
     * @return \client.model\FunnelWindow
     */
    public function getWindow()
    {
        return $this->window;
    }
  
    /**
     * Sets window
     * @param \client.model\FunnelWindow $window 
     * @return $this
     */
    public function setWindow($window)
    {
        
        $this->window = $window;
        return $this;
    }
    
    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->end_date;
    }
  
    /**
     * Sets end_date
     * @param \DateTime $end_date 
     * @return $this
     */
    public function setEndDate($end_date)
    {
        
        $this->end_date = $end_date;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
