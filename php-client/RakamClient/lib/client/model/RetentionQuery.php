<?php
/**
 * RetentionQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace client.model;

use \ArrayAccess;
/**
 * RetentionQuery Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Rakam
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RetentionQuery implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'project' => 'string',
        'first_action' => '\client.model\RetentionAction',
        'returning_action' => '\client.model\RetentionAction',
        'dimension' => 'string',
        'date_unit' => 'string',
        'period' => 'int',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'project' => 'project',
        'first_action' => 'first_action',
        'returning_action' => 'returning_action',
        'dimension' => 'dimension',
        'date_unit' => 'date_unit',
        'period' => 'period',
        'start_date' => 'startDate',
        'end_date' => 'endDate'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'project' => 'setProject',
        'first_action' => 'setFirstAction',
        'returning_action' => 'setReturningAction',
        'dimension' => 'setDimension',
        'date_unit' => 'setDateUnit',
        'period' => 'setPeriod',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'project' => 'getProject',
        'first_action' => 'getFirstAction',
        'returning_action' => 'getReturningAction',
        'dimension' => 'getDimension',
        'date_unit' => 'getDateUnit',
        'period' => 'getPeriod',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate'
    );
  
    
    /**
      * $project 
      * @var string
      */
    protected $project;
    
    /**
      * $first_action 
      * @var \client.model\RetentionAction
      */
    protected $first_action;
    
    /**
      * $returning_action 
      * @var \client.model\RetentionAction
      */
    protected $returning_action;
    
    /**
      * $dimension 
      * @var string
      */
    protected $dimension;
    
    /**
      * $date_unit 
      * @var string
      */
    protected $date_unit;
    
    /**
      * $period 
      * @var int
      */
    protected $period;
    
    /**
      * $start_date 
      * @var \DateTime
      */
    protected $start_date;
    
    /**
      * $end_date 
      * @var \DateTime
      */
    protected $end_date;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->project = $data["project"];
            $this->first_action = $data["first_action"];
            $this->returning_action = $data["returning_action"];
            $this->dimension = $data["dimension"];
            $this->date_unit = $data["date_unit"];
            $this->period = $data["period"];
            $this->start_date = $data["start_date"];
            $this->end_date = $data["end_date"];
        }
    }
    
    /**
     * Gets project
     * @return string
     */
    public function getProject()
    {
        return $this->project;
    }
  
    /**
     * Sets project
     * @param string $project 
     * @return $this
     */
    public function setProject($project)
    {
        
        $this->project = $project;
        return $this;
    }
    
    /**
     * Gets first_action
     * @return \client.model\RetentionAction
     */
    public function getFirstAction()
    {
        return $this->first_action;
    }
  
    /**
     * Sets first_action
     * @param \client.model\RetentionAction $first_action 
     * @return $this
     */
    public function setFirstAction($first_action)
    {
        
        $this->first_action = $first_action;
        return $this;
    }
    
    /**
     * Gets returning_action
     * @return \client.model\RetentionAction
     */
    public function getReturningAction()
    {
        return $this->returning_action;
    }
  
    /**
     * Sets returning_action
     * @param \client.model\RetentionAction $returning_action 
     * @return $this
     */
    public function setReturningAction($returning_action)
    {
        
        $this->returning_action = $returning_action;
        return $this;
    }
    
    /**
     * Gets dimension
     * @return string
     */
    public function getDimension()
    {
        return $this->dimension;
    }
  
    /**
     * Sets dimension
     * @param string $dimension 
     * @return $this
     */
    public function setDimension($dimension)
    {
        
        $this->dimension = $dimension;
        return $this;
    }
    
    /**
     * Gets date_unit
     * @return string
     */
    public function getDateUnit()
    {
        return $this->date_unit;
    }
  
    /**
     * Sets date_unit
     * @param string $date_unit 
     * @return $this
     */
    public function setDateUnit($date_unit)
    {
        $allowed_values = array("DAY", "WEEK", "MONTH");
        if (!in_array($date_unit, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'date_unit', must be one of 'DAY', 'WEEK', 'MONTH'");
        }
        $this->date_unit = $date_unit;
        return $this;
    }
    
    /**
     * Gets period
     * @return int
     */
    public function getPeriod()
    {
        return $this->period;
    }
  
    /**
     * Sets period
     * @param int $period 
     * @return $this
     */
    public function setPeriod($period)
    {
        
        $this->period = $period;
        return $this;
    }
    
    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->start_date;
    }
  
    /**
     * Sets start_date
     * @param \DateTime $start_date 
     * @return $this
     */
    public function setStartDate($start_date)
    {
        
        $this->start_date = $start_date;
        return $this;
    }
    
    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->end_date;
    }
  
    /**
     * Sets end_date
     * @param \DateTime $end_date 
     * @return $this
     */
    public function setEndDate($end_date)
    {
        
        $this->end_date = $end_date;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
