<?php
/**
 * ABTestingReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace client.model;

use \ArrayAccess;
/**
 * ABTestingReport Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Rakam
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ABTestingReport implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'project' => 'string',
        'name' => 'string',
        'variants' => '\client.model\Variant[]',
        'goal' => '\client.model\Goal',
        'options' => 'object',
        'id' => 'int',
        'collection_name' => 'string',
        'connector_field' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'project' => 'project',
        'name' => 'name',
        'variants' => 'variants',
        'goal' => 'goal',
        'options' => 'options',
        'id' => 'id',
        'collection_name' => 'collectionName',
        'connector_field' => 'connectorField'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'project' => 'setProject',
        'name' => 'setName',
        'variants' => 'setVariants',
        'goal' => 'setGoal',
        'options' => 'setOptions',
        'id' => 'setId',
        'collection_name' => 'setCollectionName',
        'connector_field' => 'setConnectorField'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'project' => 'getProject',
        'name' => 'getName',
        'variants' => 'getVariants',
        'goal' => 'getGoal',
        'options' => 'getOptions',
        'id' => 'getId',
        'collection_name' => 'getCollectionName',
        'connector_field' => 'getConnectorField'
    );
  
    
    /**
      * $project 
      * @var string
      */
    protected $project;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $variants 
      * @var \client.model\Variant[]
      */
    protected $variants;
    
    /**
      * $goal 
      * @var \client.model\Goal
      */
    protected $goal;
    
    /**
      * $options 
      * @var object
      */
    protected $options;
    
    /**
      * $id 
      * @var int
      */
    protected $id;
    
    /**
      * $collection_name 
      * @var string
      */
    protected $collection_name;
    
    /**
      * $connector_field 
      * @var string
      */
    protected $connector_field;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->project = $data["project"];
            $this->name = $data["name"];
            $this->variants = $data["variants"];
            $this->goal = $data["goal"];
            $this->options = $data["options"];
            $this->id = $data["id"];
            $this->collection_name = $data["collection_name"];
            $this->connector_field = $data["connector_field"];
        }
    }
    
    /**
     * Gets project
     * @return string
     */
    public function getProject()
    {
        return $this->project;
    }
  
    /**
     * Sets project
     * @param string $project 
     * @return $this
     */
    public function setProject($project)
    {
        
        $this->project = $project;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets variants
     * @return \client.model\Variant[]
     */
    public function getVariants()
    {
        return $this->variants;
    }
  
    /**
     * Sets variants
     * @param \client.model\Variant[] $variants 
     * @return $this
     */
    public function setVariants($variants)
    {
        
        $this->variants = $variants;
        return $this;
    }
    
    /**
     * Gets goal
     * @return \client.model\Goal
     */
    public function getGoal()
    {
        return $this->goal;
    }
  
    /**
     * Sets goal
     * @param \client.model\Goal $goal 
     * @return $this
     */
    public function setGoal($goal)
    {
        
        $this->goal = $goal;
        return $this;
    }
    
    /**
     * Gets options
     * @return object
     */
    public function getOptions()
    {
        return $this->options;
    }
  
    /**
     * Sets options
     * @param object $options 
     * @return $this
     */
    public function setOptions($options)
    {
        
        $this->options = $options;
        return $this;
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets collection_name
     * @return string
     */
    public function getCollectionName()
    {
        return $this->collection_name;
    }
  
    /**
     * Sets collection_name
     * @param string $collection_name 
     * @return $this
     */
    public function setCollectionName($collection_name)
    {
        
        $this->collection_name = $collection_name;
        return $this;
    }
    
    /**
     * Gets connector_field
     * @return string
     */
    public function getConnectorField()
    {
        return $this->connector_field;
    }
  
    /**
     * Sets connector_field
     * @param string $connector_field 
     * @return $this
     */
    public function setConnectorField($connector_field)
    {
        
        $this->connector_field = $connector_field;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
