<?php
/**
 * UserCreateSegment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace client.model;

use \ArrayAccess;
/**
 * UserCreateSegment Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Rakam
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserCreateSegment implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'project' => 'string',
        'name' => 'string',
        'table_name' => 'string',
        'filter_expression' => 'string',
        'event_filters' => '\client.model\EventFilter[]',
        'cache_eviction' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'project' => 'project',
        'name' => 'name',
        'table_name' => 'table_name',
        'filter_expression' => 'filter_expression',
        'event_filters' => 'event_filters',
        'cache_eviction' => 'cache_eviction'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'project' => 'setProject',
        'name' => 'setName',
        'table_name' => 'setTableName',
        'filter_expression' => 'setFilterExpression',
        'event_filters' => 'setEventFilters',
        'cache_eviction' => 'setCacheEviction'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'project' => 'getProject',
        'name' => 'getName',
        'table_name' => 'getTableName',
        'filter_expression' => 'getFilterExpression',
        'event_filters' => 'getEventFilters',
        'cache_eviction' => 'getCacheEviction'
    );
  
    
    /**
      * $project 
      * @var string
      */
    protected $project;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $table_name 
      * @var string
      */
    protected $table_name;
    
    /**
      * $filter_expression 
      * @var string
      */
    protected $filter_expression;
    
    /**
      * $event_filters 
      * @var \client.model\EventFilter[]
      */
    protected $event_filters;
    
    /**
      * $cache_eviction 
      * @var string
      */
    protected $cache_eviction;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->project = $data["project"];
            $this->name = $data["name"];
            $this->table_name = $data["table_name"];
            $this->filter_expression = $data["filter_expression"];
            $this->event_filters = $data["event_filters"];
            $this->cache_eviction = $data["cache_eviction"];
        }
    }
    
    /**
     * Gets project
     * @return string
     */
    public function getProject()
    {
        return $this->project;
    }
  
    /**
     * Sets project
     * @param string $project 
     * @return $this
     */
    public function setProject($project)
    {
        
        $this->project = $project;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets table_name
     * @return string
     */
    public function getTableName()
    {
        return $this->table_name;
    }
  
    /**
     * Sets table_name
     * @param string $table_name 
     * @return $this
     */
    public function setTableName($table_name)
    {
        
        $this->table_name = $table_name;
        return $this;
    }
    
    /**
     * Gets filter_expression
     * @return string
     */
    public function getFilterExpression()
    {
        return $this->filter_expression;
    }
  
    /**
     * Sets filter_expression
     * @param string $filter_expression 
     * @return $this
     */
    public function setFilterExpression($filter_expression)
    {
        
        $this->filter_expression = $filter_expression;
        return $this;
    }
    
    /**
     * Gets event_filters
     * @return \client.model\EventFilter[]
     */
    public function getEventFilters()
    {
        return $this->event_filters;
    }
  
    /**
     * Sets event_filters
     * @param \client.model\EventFilter[] $event_filters 
     * @return $this
     */
    public function setEventFilters($event_filters)
    {
        
        $this->event_filters = $event_filters;
        return $this;
    }
    
    /**
     * Gets cache_eviction
     * @return string
     */
    public function getCacheEviction()
    {
        return $this->cache_eviction;
    }
  
    /**
     * Sets cache_eviction
     * @param string $cache_eviction 
     * @return $this
     */
    public function setCacheEviction($cache_eviction)
    {
        
        $this->cache_eviction = $cache_eviction;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
