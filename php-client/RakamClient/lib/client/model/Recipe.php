<?php
/**
 * Recipe
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rakam
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace client.model;

use \ArrayAccess;
/**
 * Recipe Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Rakam
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Recipe implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'strategy' => 'string',
        'project' => 'string',
        'collections' => 'map[string,\client.model\Collection]',
        'reports' => '\client.model\ReportBuilder[]',
        'materialized_views' => '\client.model\MaterializedViewBuilder[]',
        'continuous_queries' => '\client.model\ContinuousQueryBuilder[]',
        'continuous_query_builders' => '\client.model\ContinuousQueryBuilder[]',
        'materialized_view_builders' => '\client.model\MaterializedViewBuilder[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'strategy' => 'strategy',
        'project' => 'project',
        'collections' => 'collections',
        'reports' => 'reports',
        'materialized_views' => 'materializedViews',
        'continuous_queries' => 'continuousQueries',
        'continuous_query_builders' => 'continuousQueryBuilders',
        'materialized_view_builders' => 'materializedViewBuilders'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'strategy' => 'setStrategy',
        'project' => 'setProject',
        'collections' => 'setCollections',
        'reports' => 'setReports',
        'materialized_views' => 'setMaterializedViews',
        'continuous_queries' => 'setContinuousQueries',
        'continuous_query_builders' => 'setContinuousQueryBuilders',
        'materialized_view_builders' => 'setMaterializedViewBuilders'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'strategy' => 'getStrategy',
        'project' => 'getProject',
        'collections' => 'getCollections',
        'reports' => 'getReports',
        'materialized_views' => 'getMaterializedViews',
        'continuous_queries' => 'getContinuousQueries',
        'continuous_query_builders' => 'getContinuousQueryBuilders',
        'materialized_view_builders' => 'getMaterializedViewBuilders'
    );
  
    
    /**
      * $strategy 
      * @var string
      */
    protected $strategy;
    
    /**
      * $project 
      * @var string
      */
    protected $project;
    
    /**
      * $collections 
      * @var map[string,\client.model\Collection]
      */
    protected $collections;
    
    /**
      * $reports 
      * @var \client.model\ReportBuilder[]
      */
    protected $reports;
    
    /**
      * $materialized_views 
      * @var \client.model\MaterializedViewBuilder[]
      */
    protected $materialized_views;
    
    /**
      * $continuous_queries 
      * @var \client.model\ContinuousQueryBuilder[]
      */
    protected $continuous_queries;
    
    /**
      * $continuous_query_builders 
      * @var \client.model\ContinuousQueryBuilder[]
      */
    protected $continuous_query_builders;
    
    /**
      * $materialized_view_builders 
      * @var \client.model\MaterializedViewBuilder[]
      */
    protected $materialized_view_builders;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->strategy = $data["strategy"];
            $this->project = $data["project"];
            $this->collections = $data["collections"];
            $this->reports = $data["reports"];
            $this->materialized_views = $data["materialized_views"];
            $this->continuous_queries = $data["continuous_queries"];
            $this->continuous_query_builders = $data["continuous_query_builders"];
            $this->materialized_view_builders = $data["materialized_view_builders"];
        }
    }
    
    /**
     * Gets strategy
     * @return string
     */
    public function getStrategy()
    {
        return $this->strategy;
    }
  
    /**
     * Sets strategy
     * @param string $strategy 
     * @return $this
     */
    public function setStrategy($strategy)
    {
        $allowed_values = array("DEFAULT", "SPECIFIC");
        if (!in_array($strategy, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'strategy', must be one of 'DEFAULT', 'SPECIFIC'");
        }
        $this->strategy = $strategy;
        return $this;
    }
    
    /**
     * Gets project
     * @return string
     */
    public function getProject()
    {
        return $this->project;
    }
  
    /**
     * Sets project
     * @param string $project 
     * @return $this
     */
    public function setProject($project)
    {
        
        $this->project = $project;
        return $this;
    }
    
    /**
     * Gets collections
     * @return map[string,\client.model\Collection]
     */
    public function getCollections()
    {
        return $this->collections;
    }
  
    /**
     * Sets collections
     * @param map[string,\client.model\Collection] $collections 
     * @return $this
     */
    public function setCollections($collections)
    {
        
        $this->collections = $collections;
        return $this;
    }
    
    /**
     * Gets reports
     * @return \client.model\ReportBuilder[]
     */
    public function getReports()
    {
        return $this->reports;
    }
  
    /**
     * Sets reports
     * @param \client.model\ReportBuilder[] $reports 
     * @return $this
     */
    public function setReports($reports)
    {
        
        $this->reports = $reports;
        return $this;
    }
    
    /**
     * Gets materialized_views
     * @return \client.model\MaterializedViewBuilder[]
     */
    public function getMaterializedViews()
    {
        return $this->materialized_views;
    }
  
    /**
     * Sets materialized_views
     * @param \client.model\MaterializedViewBuilder[] $materialized_views 
     * @return $this
     */
    public function setMaterializedViews($materialized_views)
    {
        
        $this->materialized_views = $materialized_views;
        return $this;
    }
    
    /**
     * Gets continuous_queries
     * @return \client.model\ContinuousQueryBuilder[]
     */
    public function getContinuousQueries()
    {
        return $this->continuous_queries;
    }
  
    /**
     * Sets continuous_queries
     * @param \client.model\ContinuousQueryBuilder[] $continuous_queries 
     * @return $this
     */
    public function setContinuousQueries($continuous_queries)
    {
        
        $this->continuous_queries = $continuous_queries;
        return $this;
    }
    
    /**
     * Gets continuous_query_builders
     * @return \client.model\ContinuousQueryBuilder[]
     */
    public function getContinuousQueryBuilders()
    {
        return $this->continuous_query_builders;
    }
  
    /**
     * Sets continuous_query_builders
     * @param \client.model\ContinuousQueryBuilder[] $continuous_query_builders 
     * @return $this
     */
    public function setContinuousQueryBuilders($continuous_query_builders)
    {
        
        $this->continuous_query_builders = $continuous_query_builders;
        return $this;
    }
    
    /**
     * Gets materialized_view_builders
     * @return \client.model\MaterializedViewBuilder[]
     */
    public function getMaterializedViewBuilders()
    {
        return $this->materialized_view_builders;
    }
  
    /**
     * Sets materialized_view_builders
     * @param \client.model\MaterializedViewBuilder[] $materialized_view_builders 
     * @return $this
     */
    public function setMaterializedViewBuilders($materialized_view_builders)
    {
        
        $this->materialized_view_builders = $materialized_view_builders;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
