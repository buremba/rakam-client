# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SearchUsers(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SearchUsers - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'project': 'str',
            'columns': 'list[str]',
            'filter': 'str',
            'event_filters': 'list[EventFilter]',
            'sorting': 'Sorting',
            'offset': 'int',
            'limit': 'int'
        }

        self.attribute_map = {
            'project': 'project',
            'columns': 'columns',
            'filter': 'filter',
            'event_filters': 'event_filters',
            'sorting': 'sorting',
            'offset': 'offset',
            'limit': 'limit'
        }

        self._project = None
        self._columns = None
        self._filter = None
        self._event_filters = None
        self._sorting = None
        self._offset = None
        self._limit = None

    @property
    def project(self):
        """
        Gets the project of this SearchUsers.


        :return: The project of this SearchUsers.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this SearchUsers.


        :param project: The project of this SearchUsers.
        :type: str
        """
        self._project = project

    @property
    def columns(self):
        """
        Gets the columns of this SearchUsers.


        :return: The columns of this SearchUsers.
        :rtype: list[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """
        Sets the columns of this SearchUsers.


        :param columns: The columns of this SearchUsers.
        :type: list[str]
        """
        self._columns = columns

    @property
    def filter(self):
        """
        Gets the filter of this SearchUsers.


        :return: The filter of this SearchUsers.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this SearchUsers.


        :param filter: The filter of this SearchUsers.
        :type: str
        """
        self._filter = filter

    @property
    def event_filters(self):
        """
        Gets the event_filters of this SearchUsers.


        :return: The event_filters of this SearchUsers.
        :rtype: list[EventFilter]
        """
        return self._event_filters

    @event_filters.setter
    def event_filters(self, event_filters):
        """
        Sets the event_filters of this SearchUsers.


        :param event_filters: The event_filters of this SearchUsers.
        :type: list[EventFilter]
        """
        self._event_filters = event_filters

    @property
    def sorting(self):
        """
        Gets the sorting of this SearchUsers.


        :return: The sorting of this SearchUsers.
        :rtype: Sorting
        """
        return self._sorting

    @sorting.setter
    def sorting(self, sorting):
        """
        Sets the sorting of this SearchUsers.


        :param sorting: The sorting of this SearchUsers.
        :type: Sorting
        """
        self._sorting = sorting

    @property
    def offset(self):
        """
        Gets the offset of this SearchUsers.


        :return: The offset of this SearchUsers.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this SearchUsers.


        :param offset: The offset of this SearchUsers.
        :type: int
        """
        self._offset = offset

    @property
    def limit(self):
        """
        Gets the limit of this SearchUsers.


        :return: The limit of this SearchUsers.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this SearchUsers.


        :param limit: The limit of this SearchUsers.
        :type: int
        """
        self._limit = limit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
