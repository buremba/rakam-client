# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class EventFilterAggregation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EventFilterAggregation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'field': 'str',
            'minimum': 'int',
            'maximum': 'int',
            'type': 'str'
        }

        self.attribute_map = {
            'field': 'field',
            'minimum': 'minimum',
            'maximum': 'maximum',
            'type': 'type'
        }

        self._field = None
        self._minimum = None
        self._maximum = None
        self._type = None

    @property
    def field(self):
        """
        Gets the field of this EventFilterAggregation.


        :return: The field of this EventFilterAggregation.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """
        Sets the field of this EventFilterAggregation.


        :param field: The field of this EventFilterAggregation.
        :type: str
        """
        self._field = field

    @property
    def minimum(self):
        """
        Gets the minimum of this EventFilterAggregation.


        :return: The minimum of this EventFilterAggregation.
        :rtype: int
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """
        Sets the minimum of this EventFilterAggregation.


        :param minimum: The minimum of this EventFilterAggregation.
        :type: int
        """
        self._minimum = minimum

    @property
    def maximum(self):
        """
        Gets the maximum of this EventFilterAggregation.


        :return: The maximum of this EventFilterAggregation.
        :rtype: int
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """
        Sets the maximum of this EventFilterAggregation.


        :param maximum: The maximum of this EventFilterAggregation.
        :type: int
        """
        self._maximum = maximum

    @property
    def type(self):
        """
        Gets the type of this EventFilterAggregation.


        :return: The type of this EventFilterAggregation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this EventFilterAggregation.


        :param type: The type of this EventFilterAggregation.
        :type: str
        """
        allowed_values = ["COUNT", "COUNT_UNIQUE", "SUM", "MINIMUM", "MAXIMUM", "AVERAGE", "APPROXIMATE_UNIQUE"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

