# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class RealtimeGet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RealtimeGet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'project': 'str',
            'table_name': 'str',
            'filter': 'str',
            'measure': 'Measure',
            'dimensions': 'list[str]',
            'aggregate': 'bool',
            'date_start': 'datetime',
            'date_end': 'datetime'
        }

        self.attribute_map = {
            'project': 'project',
            'table_name': 'table_name',
            'filter': 'filter',
            'measure': 'measure',
            'dimensions': 'dimensions',
            'aggregate': 'aggregate',
            'date_start': 'date_start',
            'date_end': 'date_end'
        }

        self._project = None
        self._table_name = None
        self._filter = None
        self._measure = None
        self._dimensions = None
        self._aggregate = None
        self._date_start = None
        self._date_end = None

    @property
    def project(self):
        """
        Gets the project of this RealtimeGet.


        :return: The project of this RealtimeGet.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this RealtimeGet.


        :param project: The project of this RealtimeGet.
        :type: str
        """
        self._project = project

    @property
    def table_name(self):
        """
        Gets the table_name of this RealtimeGet.


        :return: The table_name of this RealtimeGet.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """
        Sets the table_name of this RealtimeGet.


        :param table_name: The table_name of this RealtimeGet.
        :type: str
        """
        self._table_name = table_name

    @property
    def filter(self):
        """
        Gets the filter of this RealtimeGet.


        :return: The filter of this RealtimeGet.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this RealtimeGet.


        :param filter: The filter of this RealtimeGet.
        :type: str
        """
        self._filter = filter

    @property
    def measure(self):
        """
        Gets the measure of this RealtimeGet.


        :return: The measure of this RealtimeGet.
        :rtype: Measure
        """
        return self._measure

    @measure.setter
    def measure(self, measure):
        """
        Sets the measure of this RealtimeGet.


        :param measure: The measure of this RealtimeGet.
        :type: Measure
        """
        self._measure = measure

    @property
    def dimensions(self):
        """
        Gets the dimensions of this RealtimeGet.


        :return: The dimensions of this RealtimeGet.
        :rtype: list[str]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """
        Sets the dimensions of this RealtimeGet.


        :param dimensions: The dimensions of this RealtimeGet.
        :type: list[str]
        """
        self._dimensions = dimensions

    @property
    def aggregate(self):
        """
        Gets the aggregate of this RealtimeGet.


        :return: The aggregate of this RealtimeGet.
        :rtype: bool
        """
        return self._aggregate

    @aggregate.setter
    def aggregate(self, aggregate):
        """
        Sets the aggregate of this RealtimeGet.


        :param aggregate: The aggregate of this RealtimeGet.
        :type: bool
        """
        self._aggregate = aggregate

    @property
    def date_start(self):
        """
        Gets the date_start of this RealtimeGet.


        :return: The date_start of this RealtimeGet.
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """
        Sets the date_start of this RealtimeGet.


        :param date_start: The date_start of this RealtimeGet.
        :type: datetime
        """
        self._date_start = date_start

    @property
    def date_end(self):
        """
        Gets the date_end of this RealtimeGet.


        :return: The date_end of this RealtimeGet.
        :rtype: datetime
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """
        Sets the date_end of this RealtimeGet.


        :param date_end: The date_end of this RealtimeGet.
        :type: datetime
        """
        self._date_end = date_end

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

