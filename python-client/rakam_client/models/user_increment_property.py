# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class UserIncrementProperty(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UserIncrementProperty - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'project': 'str',
            'api': 'UserContext',
            'user': 'str',
            'property': 'str',
            '': 'float'
        }

        self.attribute_map = {
            'project': 'project',
            'api': 'api',
            'user': 'user',
            'property': 'property',
            '': ''
        }

        self._project = None
        self._api = None
        self._user = None
        self._property = None
        self._ = None

    @property
    def project(self):
        """
        Gets the project of this UserIncrementProperty.


        :return: The project of this UserIncrementProperty.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this UserIncrementProperty.


        :param project: The project of this UserIncrementProperty.
        :type: str
        """
        self._project = project

    @property
    def api(self):
        """
        Gets the api of this UserIncrementProperty.


        :return: The api of this UserIncrementProperty.
        :rtype: UserContext
        """
        return self._api

    @api.setter
    def api(self, api):
        """
        Sets the api of this UserIncrementProperty.


        :param api: The api of this UserIncrementProperty.
        :type: UserContext
        """
        self._api = api

    @property
    def user(self):
        """
        Gets the user of this UserIncrementProperty.


        :return: The user of this UserIncrementProperty.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this UserIncrementProperty.


        :param user: The user of this UserIncrementProperty.
        :type: str
        """
        self._user = user

    @property
    def property(self):
        """
        Gets the property of this UserIncrementProperty.


        :return: The property of this UserIncrementProperty.
        :rtype: str
        """
        return self._property

    @property.setter
    def property(self, property):
        """
        Sets the property of this UserIncrementProperty.


        :param property: The property of this UserIncrementProperty.
        :type: str
        """
        self._property = property

    @property
    def (self):
        """
        Gets the  of this UserIncrementProperty.


        :return: The  of this UserIncrementProperty.
        :rtype: float
        """
        return self._

    @.setter
    def (self, ):
        """
        Sets the  of this UserIncrementProperty.


        :param : The  of this UserIncrementProperty.
        :type: float
        """
        self._ = 

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

