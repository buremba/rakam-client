# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ABTestingReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ABTestingReport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'project': 'str',
            'name': 'str',
            'variants': 'list[Variant]',
            'goal': 'Goal',
            'options': 'object',
            'id': 'int',
            'collection_name': 'str',
            'connector_field': 'str'
        }

        self.attribute_map = {
            'project': 'project',
            'name': 'name',
            'variants': 'variants',
            'goal': 'goal',
            'options': 'options',
            'id': 'id',
            'collection_name': 'collectionName',
            'connector_field': 'connectorField'
        }

        self._project = None
        self._name = None
        self._variants = None
        self._goal = None
        self._options = None
        self._id = None
        self._collection_name = None
        self._connector_field = None

    @property
    def project(self):
        """
        Gets the project of this ABTestingReport.


        :return: The project of this ABTestingReport.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this ABTestingReport.


        :param project: The project of this ABTestingReport.
        :type: str
        """
        self._project = project

    @property
    def name(self):
        """
        Gets the name of this ABTestingReport.


        :return: The name of this ABTestingReport.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ABTestingReport.


        :param name: The name of this ABTestingReport.
        :type: str
        """
        self._name = name

    @property
    def variants(self):
        """
        Gets the variants of this ABTestingReport.


        :return: The variants of this ABTestingReport.
        :rtype: list[Variant]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """
        Sets the variants of this ABTestingReport.


        :param variants: The variants of this ABTestingReport.
        :type: list[Variant]
        """
        self._variants = variants

    @property
    def goal(self):
        """
        Gets the goal of this ABTestingReport.


        :return: The goal of this ABTestingReport.
        :rtype: Goal
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """
        Sets the goal of this ABTestingReport.


        :param goal: The goal of this ABTestingReport.
        :type: Goal
        """
        self._goal = goal

    @property
    def options(self):
        """
        Gets the options of this ABTestingReport.


        :return: The options of this ABTestingReport.
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this ABTestingReport.


        :param options: The options of this ABTestingReport.
        :type: object
        """
        self._options = options

    @property
    def id(self):
        """
        Gets the id of this ABTestingReport.


        :return: The id of this ABTestingReport.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ABTestingReport.


        :param id: The id of this ABTestingReport.
        :type: int
        """
        self._id = id

    @property
    def collection_name(self):
        """
        Gets the collection_name of this ABTestingReport.


        :return: The collection_name of this ABTestingReport.
        :rtype: str
        """
        return self._collection_name

    @collection_name.setter
    def collection_name(self, collection_name):
        """
        Sets the collection_name of this ABTestingReport.


        :param collection_name: The collection_name of this ABTestingReport.
        :type: str
        """
        self._collection_name = collection_name

    @property
    def connector_field(self):
        """
        Gets the connector_field of this ABTestingReport.


        :return: The connector_field of this ABTestingReport.
        :rtype: str
        """
        return self._connector_field

    @connector_field.setter
    def connector_field(self, connector_field):
        """
        Sets the connector_field of this ABTestingReport.


        :param connector_field: The connector_field of this ABTestingReport.
        :type: str
        """
        self._connector_field = connector_field

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

