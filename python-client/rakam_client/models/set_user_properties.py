# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SetUserProperties(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SetUserProperties - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'project': 'str',
            'user': 'str',
            'api': 'UserContext',
            'properties': 'dict(str, InlineResponse200)'
        }

        self.attribute_map = {
            'project': 'project',
            'user': 'user',
            'api': 'api',
            'properties': 'properties'
        }

        self._project = None
        self._user = None
        self._api = None
        self._properties = None

    @property
    def project(self):
        """
        Gets the project of this SetUserProperties.


        :return: The project of this SetUserProperties.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this SetUserProperties.


        :param project: The project of this SetUserProperties.
        :type: str
        """
        self._project = project

    @property
    def user(self):
        """
        Gets the user of this SetUserProperties.


        :return: The user of this SetUserProperties.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this SetUserProperties.


        :param user: The user of this SetUserProperties.
        :type: str
        """
        self._user = user

    @property
    def api(self):
        """
        Gets the api of this SetUserProperties.


        :return: The api of this SetUserProperties.
        :rtype: UserContext
        """
        return self._api

    @api.setter
    def api(self, api):
        """
        Sets the api of this SetUserProperties.


        :param api: The api of this SetUserProperties.
        :type: UserContext
        """
        self._api = api

    @property
    def properties(self):
        """
        Gets the properties of this SetUserProperties.


        :return: The properties of this SetUserProperties.
        :rtype: dict(str, InlineResponse200)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this SetUserProperties.


        :param properties: The properties of this SetUserProperties.
        :type: dict(str, InlineResponse200)
        """
        self._properties = properties

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

