# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Message(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Message - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'content': 'str',
            'from_user': 'object',
            'to_user': 'object',
            'parent_id': 'int',
            'seen': 'bool',
            'time': 'int',
            'project': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'content': 'content',
            'from_user': 'from_user',
            'to_user': 'to_user',
            'parent_id': 'parentId',
            'seen': 'seen',
            'time': 'time',
            'project': 'project'
        }

        self._id = None
        self._content = None
        self._from_user = None
        self._to_user = None
        self._parent_id = None
        self._seen = None
        self._time = None
        self._project = None

    @property
    def id(self):
        """
        Gets the id of this Message.


        :return: The id of this Message.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Message.


        :param id: The id of this Message.
        :type: int
        """
        self._id = id

    @property
    def content(self):
        """
        Gets the content of this Message.


        :return: The content of this Message.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this Message.


        :param content: The content of this Message.
        :type: str
        """
        self._content = content

    @property
    def from_user(self):
        """
        Gets the from_user of this Message.


        :return: The from_user of this Message.
        :rtype: object
        """
        return self._from_user

    @from_user.setter
    def from_user(self, from_user):
        """
        Sets the from_user of this Message.


        :param from_user: The from_user of this Message.
        :type: object
        """
        self._from_user = from_user

    @property
    def to_user(self):
        """
        Gets the to_user of this Message.


        :return: The to_user of this Message.
        :rtype: object
        """
        return self._to_user

    @to_user.setter
    def to_user(self, to_user):
        """
        Sets the to_user of this Message.


        :param to_user: The to_user of this Message.
        :type: object
        """
        self._to_user = to_user

    @property
    def parent_id(self):
        """
        Gets the parent_id of this Message.


        :return: The parent_id of this Message.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this Message.


        :param parent_id: The parent_id of this Message.
        :type: int
        """
        self._parent_id = parent_id

    @property
    def seen(self):
        """
        Gets the seen of this Message.


        :return: The seen of this Message.
        :rtype: bool
        """
        return self._seen

    @seen.setter
    def seen(self, seen):
        """
        Sets the seen of this Message.


        :param seen: The seen of this Message.
        :type: bool
        """
        self._seen = seen

    @property
    def time(self):
        """
        Gets the time of this Message.


        :return: The time of this Message.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this Message.


        :param time: The time of this Message.
        :type: int
        """
        self._time = time

    @property
    def project(self):
        """
        Gets the project of this Message.


        :return: The project of this Message.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this Message.


        :param project: The project of this Message.
        :type: str
        """
        self._project = project

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
