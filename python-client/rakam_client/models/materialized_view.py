# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class MaterializedView(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        MaterializedView - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'project': 'str',
            'name': 'str',
            'table_name': 'str',
            'query': 'str',
            'update_interval': 'str',
            'options': 'dict(str, object)'
        }

        self.attribute_map = {
            'project': 'project',
            'name': 'name',
            'table_name': 'table_name',
            'query': 'query',
            'update_interval': 'update_interval',
            'options': 'options'
        }

        self._project = None
        self._name = None
        self._table_name = None
        self._query = None
        self._update_interval = None
        self._options = None

    @property
    def project(self):
        """
        Gets the project of this MaterializedView.


        :return: The project of this MaterializedView.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this MaterializedView.


        :param project: The project of this MaterializedView.
        :type: str
        """
        self._project = project

    @property
    def name(self):
        """
        Gets the name of this MaterializedView.


        :return: The name of this MaterializedView.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MaterializedView.


        :param name: The name of this MaterializedView.
        :type: str
        """
        self._name = name

    @property
    def table_name(self):
        """
        Gets the table_name of this MaterializedView.


        :return: The table_name of this MaterializedView.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """
        Sets the table_name of this MaterializedView.


        :param table_name: The table_name of this MaterializedView.
        :type: str
        """
        self._table_name = table_name

    @property
    def query(self):
        """
        Gets the query of this MaterializedView.


        :return: The query of this MaterializedView.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this MaterializedView.


        :param query: The query of this MaterializedView.
        :type: str
        """
        self._query = query

    @property
    def update_interval(self):
        """
        Gets the update_interval of this MaterializedView.


        :return: The update_interval of this MaterializedView.
        :rtype: str
        """
        return self._update_interval

    @update_interval.setter
    def update_interval(self, update_interval):
        """
        Sets the update_interval of this MaterializedView.


        :param update_interval: The update_interval of this MaterializedView.
        :type: str
        """
        self._update_interval = update_interval

    @property
    def options(self):
        """
        Gets the options of this MaterializedView.


        :return: The options of this MaterializedView.
        :rtype: dict(str, object)
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this MaterializedView.


        :param options: The options of this MaterializedView.
        :type: dict(str, object)
        """
        self._options = options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
