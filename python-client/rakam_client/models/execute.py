# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Execute(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Execute - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'project': 'str',
            'measure': 'Measure',
            'grouping': 'Reference',
            'segment': 'Reference',
            'filter_expression': 'str',
            'start_date': 'date',
            'end_date': 'date',
            'collections': 'list[str]'
        }

        self.attribute_map = {
            'project': 'project',
            'measure': 'measure',
            'grouping': 'grouping',
            'segment': 'segment',
            'filter_expression': 'filterExpression',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'collections': 'collections'
        }

        self._project = None
        self._measure = None
        self._grouping = None
        self._segment = None
        self._filter_expression = None
        self._start_date = None
        self._end_date = None
        self._collections = None

    @property
    def project(self):
        """
        Gets the project of this Execute.


        :return: The project of this Execute.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this Execute.


        :param project: The project of this Execute.
        :type: str
        """
        self._project = project

    @property
    def measure(self):
        """
        Gets the measure of this Execute.


        :return: The measure of this Execute.
        :rtype: Measure
        """
        return self._measure

    @measure.setter
    def measure(self, measure):
        """
        Sets the measure of this Execute.


        :param measure: The measure of this Execute.
        :type: Measure
        """
        self._measure = measure

    @property
    def grouping(self):
        """
        Gets the grouping of this Execute.


        :return: The grouping of this Execute.
        :rtype: Reference
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """
        Sets the grouping of this Execute.


        :param grouping: The grouping of this Execute.
        :type: Reference
        """
        self._grouping = grouping

    @property
    def segment(self):
        """
        Gets the segment of this Execute.


        :return: The segment of this Execute.
        :rtype: Reference
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """
        Sets the segment of this Execute.


        :param segment: The segment of this Execute.
        :type: Reference
        """
        self._segment = segment

    @property
    def filter_expression(self):
        """
        Gets the filter_expression of this Execute.


        :return: The filter_expression of this Execute.
        :rtype: str
        """
        return self._filter_expression

    @filter_expression.setter
    def filter_expression(self, filter_expression):
        """
        Sets the filter_expression of this Execute.


        :param filter_expression: The filter_expression of this Execute.
        :type: str
        """
        self._filter_expression = filter_expression

    @property
    def start_date(self):
        """
        Gets the start_date of this Execute.


        :return: The start_date of this Execute.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this Execute.


        :param start_date: The start_date of this Execute.
        :type: date
        """
        self._start_date = start_date

    @property
    def end_date(self):
        """
        Gets the end_date of this Execute.


        :return: The end_date of this Execute.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this Execute.


        :param end_date: The end_date of this Execute.
        :type: date
        """
        self._end_date = end_date

    @property
    def collections(self):
        """
        Gets the collections of this Execute.


        :return: The collections of this Execute.
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """
        Sets the collections of this Execute.


        :param collections: The collections of this Execute.
        :type: list[str]
        """
        self._collections = collections

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
