# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Recipe(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Recipe - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'strategy': 'str',
            'project': 'str',
            'collections': 'dict(str, Collection)',
            'reports': 'list[ReportBuilder]',
            'materialized_views': 'list[MaterializedViewBuilder]',
            'continuous_queries': 'list[ContinuousQueryBuilder]',
            'continuous_query_builders': 'list[ContinuousQueryBuilder]',
            'materialized_view_builders': 'list[MaterializedViewBuilder]'
        }

        self.attribute_map = {
            'strategy': 'strategy',
            'project': 'project',
            'collections': 'collections',
            'reports': 'reports',
            'materialized_views': 'materializedViews',
            'continuous_queries': 'continuousQueries',
            'continuous_query_builders': 'continuousQueryBuilders',
            'materialized_view_builders': 'materializedViewBuilders'
        }

        self._strategy = None
        self._project = None
        self._collections = None
        self._reports = None
        self._materialized_views = None
        self._continuous_queries = None
        self._continuous_query_builders = None
        self._materialized_view_builders = None

    @property
    def strategy(self):
        """
        Gets the strategy of this Recipe.


        :return: The strategy of this Recipe.
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """
        Sets the strategy of this Recipe.


        :param strategy: The strategy of this Recipe.
        :type: str
        """
        allowed_values = ["DEFAULT", "SPECIFIC"]
        if strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `strategy`, must be one of {0}"
                .format(allowed_values)
            )
        self._strategy = strategy

    @property
    def project(self):
        """
        Gets the project of this Recipe.


        :return: The project of this Recipe.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this Recipe.


        :param project: The project of this Recipe.
        :type: str
        """
        self._project = project

    @property
    def collections(self):
        """
        Gets the collections of this Recipe.


        :return: The collections of this Recipe.
        :rtype: dict(str, Collection)
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """
        Sets the collections of this Recipe.


        :param collections: The collections of this Recipe.
        :type: dict(str, Collection)
        """
        self._collections = collections

    @property
    def reports(self):
        """
        Gets the reports of this Recipe.


        :return: The reports of this Recipe.
        :rtype: list[ReportBuilder]
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """
        Sets the reports of this Recipe.


        :param reports: The reports of this Recipe.
        :type: list[ReportBuilder]
        """
        self._reports = reports

    @property
    def materialized_views(self):
        """
        Gets the materialized_views of this Recipe.


        :return: The materialized_views of this Recipe.
        :rtype: list[MaterializedViewBuilder]
        """
        return self._materialized_views

    @materialized_views.setter
    def materialized_views(self, materialized_views):
        """
        Sets the materialized_views of this Recipe.


        :param materialized_views: The materialized_views of this Recipe.
        :type: list[MaterializedViewBuilder]
        """
        self._materialized_views = materialized_views

    @property
    def continuous_queries(self):
        """
        Gets the continuous_queries of this Recipe.


        :return: The continuous_queries of this Recipe.
        :rtype: list[ContinuousQueryBuilder]
        """
        return self._continuous_queries

    @continuous_queries.setter
    def continuous_queries(self, continuous_queries):
        """
        Sets the continuous_queries of this Recipe.


        :param continuous_queries: The continuous_queries of this Recipe.
        :type: list[ContinuousQueryBuilder]
        """
        self._continuous_queries = continuous_queries

    @property
    def continuous_query_builders(self):
        """
        Gets the continuous_query_builders of this Recipe.


        :return: The continuous_query_builders of this Recipe.
        :rtype: list[ContinuousQueryBuilder]
        """
        return self._continuous_query_builders

    @continuous_query_builders.setter
    def continuous_query_builders(self, continuous_query_builders):
        """
        Sets the continuous_query_builders of this Recipe.


        :param continuous_query_builders: The continuous_query_builders of this Recipe.
        :type: list[ContinuousQueryBuilder]
        """
        self._continuous_query_builders = continuous_query_builders

    @property
    def materialized_view_builders(self):
        """
        Gets the materialized_view_builders of this Recipe.


        :return: The materialized_view_builders of this Recipe.
        :rtype: list[MaterializedViewBuilder]
        """
        return self._materialized_view_builders

    @materialized_view_builders.setter
    def materialized_view_builders(self, materialized_view_builders):
        """
        Sets the materialized_view_builders of this Recipe.


        :param materialized_view_builders: The materialized_view_builders of this Recipe.
        :type: list[MaterializedViewBuilder]
        """
        self._materialized_view_builders = materialized_view_builders

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
