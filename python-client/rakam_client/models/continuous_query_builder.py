# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ContinuousQueryBuilder(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ContinuousQueryBuilder - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'query': 'str',
            'collections': 'list[str]',
            'options': 'dict(str, object)',
            'table_name': 'str',
            'partition_keys': 'list[str]'
        }

        self.attribute_map = {
            'name': 'name',
            'query': 'query',
            'collections': 'collections',
            'options': 'options',
            'table_name': 'tableName',
            'partition_keys': 'partitionKeys'
        }

        self._name = None
        self._query = None
        self._collections = None
        self._options = None
        self._table_name = None
        self._partition_keys = None

    @property
    def name(self):
        """
        Gets the name of this ContinuousQueryBuilder.


        :return: The name of this ContinuousQueryBuilder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ContinuousQueryBuilder.


        :param name: The name of this ContinuousQueryBuilder.
        :type: str
        """
        self._name = name

    @property
    def query(self):
        """
        Gets the query of this ContinuousQueryBuilder.


        :return: The query of this ContinuousQueryBuilder.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this ContinuousQueryBuilder.


        :param query: The query of this ContinuousQueryBuilder.
        :type: str
        """
        self._query = query

    @property
    def collections(self):
        """
        Gets the collections of this ContinuousQueryBuilder.


        :return: The collections of this ContinuousQueryBuilder.
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """
        Sets the collections of this ContinuousQueryBuilder.


        :param collections: The collections of this ContinuousQueryBuilder.
        :type: list[str]
        """
        self._collections = collections

    @property
    def options(self):
        """
        Gets the options of this ContinuousQueryBuilder.


        :return: The options of this ContinuousQueryBuilder.
        :rtype: dict(str, object)
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this ContinuousQueryBuilder.


        :param options: The options of this ContinuousQueryBuilder.
        :type: dict(str, object)
        """
        self._options = options

    @property
    def table_name(self):
        """
        Gets the table_name of this ContinuousQueryBuilder.


        :return: The table_name of this ContinuousQueryBuilder.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """
        Sets the table_name of this ContinuousQueryBuilder.


        :param table_name: The table_name of this ContinuousQueryBuilder.
        :type: str
        """
        self._table_name = table_name

    @property
    def partition_keys(self):
        """
        Gets the partition_keys of this ContinuousQueryBuilder.


        :return: The partition_keys of this ContinuousQueryBuilder.
        :rtype: list[str]
        """
        return self._partition_keys

    @partition_keys.setter
    def partition_keys(self, partition_keys):
        """
        Sets the partition_keys of this ContinuousQueryBuilder.


        :param partition_keys: The partition_keys of this ContinuousQueryBuilder.
        :type: list[str]
        """
        self._partition_keys = partition_keys

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
