//
// MaterializedviewAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

extension SwaggerClientAPI {
    
    public class MaterializedviewAPI: APIBase {
    
        /**
         
         Create view
         
         - POST /materialized-view/create
         - 
         - API Key:
           - type: apiKey master_key 
           - name: master_key
         - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
         
         - parameter materializedView: (body) 

         - returns: RequestBuilder<JsonResponse> 
         */
        public class func create(materializedView materializedView: MaterializedView) -> RequestBuilder<JsonResponse> {
            let path = "/materialized-view/create"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = materializedView.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<JsonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Delete materialized view
         
         - POST /materialized-view/delete
         - 
         - API Key:
           - type: apiKey master_key 
           - name: master_key
         - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
         
         - parameter project: (form) 
         - parameter name: (form) 

         - returns: RequestBuilder<JsonResponse> 
         */
        public class func delete(project project: String?, name: String?) -> RequestBuilder<JsonResponse> {
            let path = "/materialized-view/delete"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "project": project,
                "name": name
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<JsonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Get view
         
         - POST /materialized-view/get
         - 
         - examples: [{contentType=application/json, example="{}"}]
         
         - parameter project: (form) 
         - parameter name: (form) 

         - returns: RequestBuilder<String> 
         */
        public class func get(project project: String?, name: String?) -> RequestBuilder<String> {
            let path = "/materialized-view/get"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "project": project,
                "name": name
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         List views
         
         - POST /materialized-view/list
         - 
         - examples: [{contentType=application/json, example="{}"}]
         
         - parameter project: (form) 

         - returns: RequestBuilder<String> 
         */
        public class func listViews(project project: String?) -> RequestBuilder<String> {
            let path = "/materialized-view/list"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "project": project
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Get schemas
         
         - POST /materialized-view/schema
         - 
         - examples: [{contentType=application/json, example=[ {
  "name" : "aeiou",
  "fields" : [ {
    "nullable" : true,
    "descriptiveName" : "aeiou",
    "unique" : true,
    "name" : "aeiou",
    "description" : "aeiou",
    "type" : "aeiou",
    "category" : "aeiou"
  } ]
} ]}]
         
         - parameter project: (form) 

         - returns: RequestBuilder<[MaterializedViewSchema]> 
         */
        public class func schema(project project: String?) -> RequestBuilder<[MaterializedViewSchema]> {
            let path = "/materialized-view/schema"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "project": project
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<[MaterializedViewSchema]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Update view
         
         - GET /materialized-view/update
         - 
         - API Key:
           - type: apiKey master_key 
           - name: master_key

         - returns: RequestBuilder<Void> 
         */
        public class func update() -> RequestBuilder<Void> {
            let path = "/materialized-view/update"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
    }
}
