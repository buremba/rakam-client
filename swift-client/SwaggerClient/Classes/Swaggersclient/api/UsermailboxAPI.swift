//
// UsermailboxAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

extension SwaggerClientAPI {
    
    public class UsermailboxAPI: APIBase {
    
        /**
         
         Get user mailbox
         
         - POST /user/mailbox/get
         - Returns the last mails sent to the user
         - API Key:
           - type: apiKey read_key 
           - name: read_key
         - examples: [{contentType=application/json, example=[ [ {
  "to_user" : "{}",
  "project" : "aeiou",
  "id" : 123,
  "time" : 123456789,
  "content" : "aeiou",
  "parentId" : 123,
  "seen" : true,
  "from_user" : "{}"
} ] ]}]
         
         - parameter project: (form) 
         - parameter user: (form) 
         - parameter parent: (form) 
         - parameter limit: (form) 
         - parameter offset: (form) 

         - returns: RequestBuilder<[[Message]]> 
         */
        public class func userMailboxGet(project project: String?, user: String?, parent: Int?, limit: Int?, offset: Int?) -> RequestBuilder<[[Message]]> {
            let path = "/user/mailbox/get"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "project": project,
                "user": user,
                "parent": parent,
                "limit": limit,
                "offset": offset
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<[[Message]]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Get connected users
         
         - POST /user/mailbox/get_online_users
         - 
         - API Key:
           - type: apiKey read_key 
           - name: read_key
         - examples: [{contentType=application/json, example=[ {
  "key" : "{}"
} ]}]
         
         - parameter project: (form) 

         - returns: RequestBuilder<[[String:String]]> 
         */
        public class func userMailboxGetConnectedUsers(project project: String?) -> RequestBuilder<[[String:String]]> {
            let path = "/user/mailbox/get_online_users"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "project": project
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<[[String:String]]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Mark mail as read
         
         - POST /user/mailbox/mark_as_read
         - Marks the specified mails as read.
         - API Key:
           - type: apiKey write_key 
           - name: write_key
         - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
         
         - parameter project: (form) 
         - parameter user: (form) 
         - parameter messageIds: (form) 

         - returns: RequestBuilder<JsonResponse> 
         */
        public class func userMailboxMarkAsRead(project project: String?, user: String?, messageIds: [Int]?) -> RequestBuilder<JsonResponse> {
            let path = "/user/mailbox/mark_as_read"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "project": project,
                "user": user,
                "messageIds": messageIds
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<JsonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
    }
}
