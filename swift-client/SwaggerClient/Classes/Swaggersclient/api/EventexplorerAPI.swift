//
// EventexplorerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

extension SwaggerClientAPI {
    
    public class EventexplorerAPI: APIBase {
    
        /**
         
         Perform simple query on event data
         
         - POST /event-explorer/analyze
         - 
         - API Key:
           - type: apiKey read_key 
           - name: read_key
         - examples: [{contentType=application/json, example={
  "result" : [ [ "{}" ] ],
  "metadata" : [ {
    "descriptiveName" : "aeiou",
    "unique" : true,
    "name" : "aeiou",
    "description" : "aeiou",
    "type" : "aeiou",
    "category" : "aeiou"
  } ],
  "failed" : true,
  "error" : {
    "charPositionInLine" : 123,
    "sqlState" : "aeiou",
    "errorCode" : 123,
    "message" : "aeiou",
    "errorLine" : 123
  },
  "properties" : {
    "key" : { }
  }
}}]
         
         - parameter analyzeRequest: (body) 

         - returns: RequestBuilder<QueryResult> 
         */
        public class func eventExplorerAnalyze(analyzeRequest analyzeRequest: AnalyzeRequest) -> RequestBuilder<QueryResult> {
            let path = "/event-explorer/analyze"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = analyzeRequest.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<QueryResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Event statistics
         
         - POST /event-explorer/extra_dimensions
         - 
         - API Key:
           - type: apiKey read_key 
           - name: read_key
         - examples: [{contentType=application/json, example={
  "key" : [ "aeiou" ]
}}]
         
         - parameter project: (form) 

         - returns: RequestBuilder<[String:[String]]> 
         */
        public class func eventExplorerGetExtraDimensions(project project: String?) -> RequestBuilder<[String:[String]]> {
            let path = "/event-explorer/extra_dimensions"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "project": project
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<[String:[String]]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Create Pre-computed table
         
         - POST /event-explorer/pre_calculate
         - 
         - API Key:
           - type: apiKey master_key 
           - name: master_key
         - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "tableName" : "aeiou"
}}]
         
         - parameter project: (form) 
         - parameter collections: (form) 
         - parameter dimensions: (form) 
         - parameter aggregations: (form) 
         - parameter measures: (form) 
         - parameter tableName: (form) 

         - returns: RequestBuilder<PreCalculatedTable> 
         */
        public class func eventExplorerCreatePreComputedTable(project project: String?, collections: [String]?, dimensions: [String]?, aggregations: [String]?, measures: [String]?, tableName: String?) -> RequestBuilder<PreCalculatedTable> {
            let path = "/event-explorer/pre_calculate"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "project": project,
                "collections": collections,
                "dimensions": dimensions,
                "aggregations": aggregations,
                "measures": measures,
                "tableName": tableName
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<PreCalculatedTable>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Event statistics
         
         - POST /event-explorer/statistics
         - 
         - API Key:
           - type: apiKey read_key 
           - name: read_key
         - examples: [{contentType=application/json, example={
  "result" : [ [ "{}" ] ],
  "metadata" : [ {
    "descriptiveName" : "aeiou",
    "unique" : true,
    "name" : "aeiou",
    "description" : "aeiou",
    "type" : "aeiou",
    "category" : "aeiou"
  } ],
  "failed" : true,
  "error" : {
    "charPositionInLine" : 123,
    "sqlState" : "aeiou",
    "errorCode" : 123,
    "message" : "aeiou",
    "errorLine" : 123
  },
  "properties" : {
    "key" : { }
  }
}}]
         
         - parameter project: (form) 
         - parameter collections: (form) 
         - parameter dimension: (form) 
         - parameter startDate: (form) 
         - parameter endDate: (form) 

         - returns: RequestBuilder<QueryResult> 
         */
        public class func eventExplorerGetEventStatistics(project project: String?, collections: [String]?, dimension: String?, startDate: NSDate?, endDate: NSDate?) -> RequestBuilder<QueryResult> {
            let path = "/event-explorer/statistics"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "project": project,
                "collections": collections,
                "dimension": dimension,
                "startDate": startDate,
                "endDate": endDate
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<QueryResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
    }
}
