//
// EventAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

extension SwaggerClientAPI {
    
    public class EventAPI: APIBase {
    
        /**
         
         Collect multiple events
         
         - POST /event/batch
         - 
         - API Key:
           - type: apiKey write_key 
           - name: write_key
         - examples: [{contentType=application/json, example=123}]
         
         - parameter eventList: (body) 

         - returns: RequestBuilder<Int> 
         */
        public class func collectEventBatchEvents(eventList eventList: EventList) -> RequestBuilder<Int> {
            let path = "/event/batch"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = eventList.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Send Bulk events
         
         - POST /event/bulk
         - 
         - API Key:
           - type: apiKey master_key 
           - name: master_key
         - examples: [{contentType=application/json, example=123}]
         
         - parameter eventList: (body) 

         - returns: RequestBuilder<Int> 
         */
        public class func collectEventBulkEvents(eventList eventList: EventList) -> RequestBuilder<Int> {
            let path = "/event/bulk"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = eventList.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Commit Bulk events
         
         - POST /event/bulk/commit
         - 
         - API Key:
           - type: apiKey master_key 
           - name: master_key
         - examples: [{contentType=application/json, example={
  "result" : [ [ "{}" ] ],
  "metadata" : [ {
    "descriptiveName" : "aeiou",
    "unique" : true,
    "name" : "aeiou",
    "description" : "aeiou",
    "type" : "aeiou",
    "category" : "aeiou"
  } ],
  "failed" : true,
  "error" : {
    "charPositionInLine" : 123,
    "sqlState" : "aeiou",
    "errorCode" : 123,
    "message" : "aeiou",
    "errorLine" : 123
  },
  "properties" : {
    "key" : { }
  }
}}]
         
         - parameter project: (form) 
         - parameter collection: (form) 

         - returns: RequestBuilder<QueryResult> 
         */
        public class func collectEventCommitBulkEvents(project project: String?, collection: String?) -> RequestBuilder<QueryResult> {
            let path = "/event/bulk/commit"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "project": project,
                "collection": collection
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<QueryResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Send Bulk events
         
         - POST /event/bulk/remote
         - 
         - API Key:
           - type: apiKey master_key 
           - name: master_key
         - examples: [{contentType=application/json, example=123}]
         
         - parameter eventList: (body) 

         - returns: RequestBuilder<Int> 
         */
        public class func collectEventBulkEventsRemote(eventList eventList: EventList) -> RequestBuilder<Int> {
            let path = "/event/bulk/remote"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = eventList.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Collect event
         
         - POST /event/collect
         - 
         - API Key:
           - type: apiKey write_key 
           - name: write_key
         - examples: [{contentType=application/json, example=123}]
         
         - parameter event: (body) 

         - returns: RequestBuilder<Int> 
         */
        public class func collectEventCollectEvent(event event: Event) -> RequestBuilder<Int> {
            let path = "/event/collect"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = event.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Analyze events
         
         - POST /query/execute
         - 
         - API Key:
           - type: apiKey read_key 
           - name: read_key
         - examples: [{contentType=application/json, example={
  "result" : [ [ "{}" ] ],
  "metadata" : [ {
    "descriptiveName" : "aeiou",
    "unique" : true,
    "name" : "aeiou",
    "description" : "aeiou",
    "type" : "aeiou",
    "category" : "aeiou"
  } ],
  "failed" : true,
  "error" : {
    "charPositionInLine" : 123,
    "sqlState" : "aeiou",
    "errorCode" : 123,
    "message" : "aeiou",
    "errorLine" : 123
  },
  "properties" : {
    "key" : { }
  }
}}]
         
         - parameter project: (form) 
         - parameter query: (form) 
         - parameter limit: (form) 

         - returns: RequestBuilder<QueryResult> 
         */
        public class func queryExecute(project project: String?, query: String?, limit: Int?) -> RequestBuilder<QueryResult> {
            let path = "/query/execute"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "project": project,
                "query": query,
                "limit": limit
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<QueryResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Explain query
         
         - POST /query/explain
         - 
         - API Key:
           - type: apiKey read_key 
           - name: read_key
         - examples: [{contentType=application/json, example={ }}]
         
         - parameter query: (form) 

         - returns: RequestBuilder<Inline_response_200> 
         */
        public class func queryExplain(query query: String?) -> RequestBuilder<Inline_response_200> {
            let path = "/query/explain"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "query": query
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Test query
         
         - POST /query/metadata
         - 
         - API Key:
           - type: apiKey read_key 
           - name: read_key
         - examples: [{contentType=application/json, example=[ {
  "descriptiveName" : "aeiou",
  "unique" : true,
  "name" : "aeiou",
  "description" : "aeiou",
  "type" : "aeiou",
  "category" : "aeiou"
} ]}]
         
         - parameter project: (form) 
         - parameter query: (form) 

         - returns: RequestBuilder<[SchemaField]> 
         */
        public class func queryMetadata(project project: String?, query: String?) -> RequestBuilder<[SchemaField]> {
            let path = "/query/metadata"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "project": project,
                "query": query
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<[SchemaField]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
    }
}
