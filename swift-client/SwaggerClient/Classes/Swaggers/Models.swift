// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
                let sourceString = source as! String
                for formatter in formatters {
                    if let date = formatter.dateFromString(sourceString) {
                        return date
                    }
                }
                fatalError("formatter failed to parse \(sourceString)")
            } 

			// Decoder for ContinuousQueryBuilder
            Decoders.addDecoder(clazz: ContinuousQueryBuilder.self) { (source: AnyObject) -> ContinuousQueryBuilder in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContinuousQueryBuilder()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.query = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["query"])
                instance.collections = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["collections"])
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["options"])
                instance.tableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tableName"])
                instance.partitionKeys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["partitionKeys"])
                return instance
            }
			

			// Decoder for User
            Decoders.addDecoder(clazz: User.self) { (source: AnyObject) -> User in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = User()
                instance.project = Decoders.decode(clazz: String.self, source: sourceDictionary["project"]!)
                instance.id = Decoders.decode(clazz: String.self, source: sourceDictionary["id"]!)
                instance.properties = Decoders.decode(clazz: Dictionary.self, source: sourceDictionary["properties"]!)
                return instance
            }
			

			// Decoder for Execute
            Decoders.addDecoder(clazz: Execute.self) { (source: AnyObject) -> Execute in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Execute()
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                instance.measure = Decoders.decodeOptional(clazz: Measure.self, source: sourceDictionary["measure"])
                instance.grouping = Decoders.decodeOptional(clazz: Reference.self, source: sourceDictionary["grouping"])
                instance.segment = Decoders.decodeOptional(clazz: Reference.self, source: sourceDictionary["segment"])
                instance.filterExpression = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filterExpression"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.endDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endDate"])
                instance.collections = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["collections"])
                return instance
            }
			

			// Decoder for Message
            Decoders.addDecoder(clazz: Message.self) { (source: AnyObject) -> Message in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Message()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"])
                instance.from_user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from_user"])
                instance.to_user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["to_user"])
                instance.parentId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["parentId"])
                instance.seen = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["seen"])
                instance.time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time"])
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                return instance
            }
			

			// Decoder for Recipe
            Decoders.addDecoder(clazz: Recipe.self) { (source: AnyObject) -> Recipe in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Recipe()
                instance.strategy = (sourceDictionary["strategy"] as? String).map { Recipe.Strategy(rawValue: $0)! }! 
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                instance.collections = Decoders.decode(clazz: Dictionary.self, source: sourceDictionary["collections"]!)
                instance.reports = Decoders.decode(clazz: Array.self, source: sourceDictionary["reports"]!)
                instance.materializedViews = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["materializedViews"])
                instance.continuousQueries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["continuousQueries"])
                instance.continuousQueryBuilders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["continuousQueryBuilders"])
                instance.materializedViewBuilders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["materializedViewBuilders"])
                return instance
            }
			

			// Decoder for BatchCreate
            Decoders.addDecoder(clazz: BatchCreate.self) { (source: AnyObject) -> BatchCreate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BatchCreate()
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                instance.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"])
                return instance
            }
			

			// Decoder for BatchSendMessages
            Decoders.addDecoder(clazz: BatchSendMessages.self) { (source: AnyObject) -> BatchSendMessages in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BatchSendMessages()
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                instance.event_filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["event_filters"])
                instance.config = Decoders.decodeOptional(clazz: MailAction.self, source: sourceDictionary["config"])
                return instance
            }
			

			// Decoder for JsonResponse
            Decoders.addDecoder(clazz: JsonResponse.self) { (source: AnyObject) -> JsonResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JsonResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }
			

			// Decoder for Send
            Decoders.addDecoder(clazz: Send.self) { (source: AnyObject) -> Send in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Send()
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"])
                instance.config = Decoders.decodeOptional(clazz: EmailActionConfig.self, source: sourceDictionary["config"])
                return instance
            }
			

			// Decoder for QueryResult
            Decoders.addDecoder(clazz: QueryResult.self) { (source: AnyObject) -> QueryResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueryResult()
                instance.metadata = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["metadata"])
                instance.result = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["result"])
                instance.error = Decoders.decodeOptional(clazz: QueryError.self, source: sourceDictionary["error"])
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                instance.failed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["failed"])
                return instance
            }
			

			// Decoder for Goal
            Decoders.addDecoder(clazz: Goal.self) { (source: AnyObject) -> Goal in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Goal()
                instance.collection = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collection"])
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                return instance
            }
			

			// Decoder for ContinuousQuery
            Decoders.addDecoder(clazz: ContinuousQuery.self) { (source: AnyObject) -> ContinuousQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContinuousQuery()
                instance.project = Decoders.decode(clazz: String.self, source: sourceDictionary["project"]!)
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.collections = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["collections"])
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["options"])
                instance.tableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tableName"])
                instance.partitionKeys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["partitionKeys"])
                instance.rawQuery = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rawQuery"])
                return instance
            }
			

			// Decoder for ReportBuilder
            Decoders.addDecoder(clazz: ReportBuilder.self) { (source: AnyObject) -> ReportBuilder in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReportBuilder()
                instance.slug = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.query = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["query"])
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["options"])
                return instance
            }
			

			// Decoder for Measure
            Decoders.addDecoder(clazz: Measure.self) { (source: AnyObject) -> Measure in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Measure()
                instance.column = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["column"])
                instance.aggregation = (sourceDictionary["aggregation"] as? String).map { Measure.Aggregation(rawValue: $0)! } 
                return instance
            }
			

			// Decoder for SearchUsers
            Decoders.addDecoder(clazz: SearchUsers.self) { (source: AnyObject) -> SearchUsers in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SearchUsers()
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                instance.columns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["columns"])
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                instance.event_filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["event_filters"])
                instance.sorting = Decoders.decodeOptional(clazz: Sorting.self, source: sourceDictionary["sorting"])
                instance.offset = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["limit"])
                return instance
            }
			

			// Decoder for MetadataResponse
            Decoders.addDecoder(clazz: MetadataResponse.self) { (source: AnyObject) -> MetadataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MetadataResponse()
                instance.columns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["columns"])
                instance.identifierColumn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifierColumn"])
                return instance
            }
			

			// Decoder for SetUserProperties
            Decoders.addDecoder(clazz: SetUserProperties.self) { (source: AnyObject) -> SetUserProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SetUserProperties()
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"])
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                return instance
            }
			

			// Decoder for QueryError
            Decoders.addDecoder(clazz: QueryError.self) { (source: AnyObject) -> QueryError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueryError()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.sqlState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sqlState"])
                instance.errorCode = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["errorCode"])
                instance.query = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["query"])
                return instance
            }
			

			// Decoder for EventFilterAggregation
            Decoders.addDecoder(clazz: EventFilterAggregation.self) { (source: AnyObject) -> EventFilterAggregation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventFilterAggregation()
                instance.field = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["field"])
                instance.minimum = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["minimum"])
                instance.maximum = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["maximum"])
                instance.type = (sourceDictionary["type"] as? String).map { EventFilterAggregation.SwaggerType(rawValue: $0)! } 
                return instance
            }
			

			// Decoder for FunnelQuery
            Decoders.addDecoder(clazz: FunnelQuery.self) { (source: AnyObject) -> FunnelQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FunnelQuery()
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                instance.connector_field = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connector_field"])
                instance.steps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["steps"])
                instance.dimension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dimension"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.endDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endDate"])
                instance.enableOtherGrouping = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enableOtherGrouping"])
                return instance
            }
			

			// Decoder for Threshold
            Decoders.addDecoder(clazz: Threshold.self) { (source: AnyObject) -> Threshold in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Threshold()
                instance.aggregation = (sourceDictionary["aggregation"] as? String).map { Threshold.Aggregation(rawValue: $0)! } 
                instance.fieldName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fieldName"])
                instance.value = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["value"])
                return instance
            }
			

			// Decoder for MaterializedViewBuilder
            Decoders.addDecoder(clazz: MaterializedViewBuilder.self) { (source: AnyObject) -> MaterializedViewBuilder in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MaterializedViewBuilder()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.table_name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["table_name"])
                instance.query = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["query"])
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["options"])
                instance.updateInterval = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updateInterval"])
                return instance
            }
			

			// Decoder for ABTestingReport
            Decoders.addDecoder(clazz: ABTestingReport.self) { (source: AnyObject) -> ABTestingReport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ABTestingReport()
                instance.project = Decoders.decode(clazz: String.self, source: sourceDictionary["project"]!)
                instance.name = Decoders.decode(clazz: String.self, source: sourceDictionary["name"]!)
                instance.variants = Decoders.decode(clazz: Array.self, source: sourceDictionary["variants"]!)
                instance.goal = Decoders.decode(clazz: Goal.self, source: sourceDictionary["goal"]!)
                instance.options = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["options"])
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.collectionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collectionName"])
                instance.connectorField = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connectorField"])
                return instance
            }
			

			// Decoder for Reference
            Decoders.addDecoder(clazz: Reference.self) { (source: AnyObject) -> Reference in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Reference()
                instance.type = (sourceDictionary["type"] as? String).map { Reference.SwaggerType(rawValue: $0)! } 
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }
			

			// Decoder for CollectionEvent
            Decoders.addDecoder(clazz: CollectionEvent.self) { (source: AnyObject) -> CollectionEvent in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CollectionEvent()
                instance.collection = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collection"])
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                return instance
            }
			

			// Decoder for RealTimeReport
            Decoders.addDecoder(clazz: RealTimeReport.self) { (source: AnyObject) -> RealTimeReport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RealTimeReport()
                instance.project = Decoders.decode(clazz: String.self, source: sourceDictionary["project"]!)
                instance.name = Decoders.decode(clazz: String.self, source: sourceDictionary["name"]!)
                instance.aggregation = (sourceDictionary["aggregation"] as? String).map { RealTimeReport.Aggregation(rawValue: $0)! }! 
                instance.table_name = Decoders.decode(clazz: String.self, source: sourceDictionary["table_name"]!)
                instance.collections = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["collections"])
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                instance.measure = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["measure"])
                instance.dimensions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dimensions"])
                return instance
            }
			

			// Decoder for SerializableAction
            Decoders.addDecoder(clazz: SerializableAction.self) { (source: AnyObject) -> SerializableAction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SerializableAction()
                instance.type = (sourceDictionary["type"] as? String).map { SerializableAction.SwaggerType(rawValue: $0)! } 
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }
			

			// Decoder for RetentionAction
            Decoders.addDecoder(clazz: RetentionAction.self) { (source: AnyObject) -> RetentionAction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RetentionAction()
                instance.collection = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collection"])
                return instance
            }
			

			// Decoder for EmailActionConfig
            Decoders.addDecoder(clazz: EmailActionConfig.self) { (source: AnyObject) -> EmailActionConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EmailActionConfig()
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"])
                instance.columnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["columnName"])
                instance.defaultValues = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["defaultValues"])
                instance.richText = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["richText"])
                return instance
            }
			

			// Decoder for EventFilter
            Decoders.addDecoder(clazz: EventFilter.self) { (source: AnyObject) -> EventFilter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventFilter()
                instance.collection = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collection"])
                instance.aggregation = Decoders.decodeOptional(clazz: EventFilterAggregation.self, source: sourceDictionary["aggregation"])
                instance.filterExpression = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filterExpression"])
                return instance
            }
			

			// Decoder for ScenarioStep
            Decoders.addDecoder(clazz: ScenarioStep.self) { (source: AnyObject) -> ScenarioStep in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ScenarioStep()
                instance.collection = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collection"])
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                instance.threshold = Decoders.decodeOptional(clazz: Threshold.self, source: sourceDictionary["threshold"])
                return instance
            }
			

			// Decoder for Sorting
            Decoders.addDecoder(clazz: Sorting.self) { (source: AnyObject) -> Sorting in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Sorting()
                instance.column = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["column"])
                instance.order = (sourceDictionary["order"] as? String).map { Sorting.Order(rawValue: $0)! } 
                return instance
            }
			

			// Decoder for SchemaField
            Decoders.addDecoder(clazz: SchemaField.self) { (source: AnyObject) -> SchemaField in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SchemaField()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = (sourceDictionary["type"] as? String).map { SchemaField.SwaggerType(rawValue: $0)! } 
                instance.nullable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["nullable"])
                instance.unique = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["unique"])
                instance.descriptiveName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["descriptiveName"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                return instance
            }
			

			// Decoder for AutomationRule
            Decoders.addDecoder(clazz: AutomationRule.self) { (source: AnyObject) -> AutomationRule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AutomationRule()
                instance.project = Decoders.decode(clazz: String.self, source: sourceDictionary["project"]!)
                instance.is_active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_active"])
                instance.scenarios = Decoders.decode(clazz: Array.self, source: sourceDictionary["scenarios"]!)
                instance.actions = Decoders.decode(clazz: Array.self, source: sourceDictionary["actions"]!)
                instance.custom_data = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["custom_data"])
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                return instance
            }
			

			// Decoder for Variant
            Decoders.addDecoder(clazz: Variant.self) { (source: AnyObject) -> Variant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Variant()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.weight = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["weight"])
                instance.data = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["data"])
                return instance
            }
			

			// Decoder for EventContext
            Decoders.addDecoder(clazz: EventContext.self) { (source: AnyObject) -> EventContext in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventContext()
                instance.writeKey = Decoders.decode(clazz: String.self, source: sourceDictionary["writeKey"]!)
                instance.apiVersion = Decoders.decode(clazz: String.self, source: sourceDictionary["apiVersion"]!)
                instance.uploadTime = Decoders.decode(clazz: Int.self, source: sourceDictionary["uploadTime"]!)
                instance.checksum = Decoders.decode(clazz: String.self, source: sourceDictionary["checksum"]!)
                return instance
            }
			

			// Decoder for MaterializedViewSchema
            Decoders.addDecoder(clazz: MaterializedViewSchema.self) { (source: AnyObject) -> MaterializedViewSchema in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MaterializedViewSchema()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                return instance
            }
			

			// Decoder for EventList
            Decoders.addDecoder(clazz: EventList.self) { (source: AnyObject) -> EventList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventList()
                instance.api = Decoders.decodeOptional(clazz: EventContext.self, source: sourceDictionary["api"])
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                instance.events = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["events"])
                return instance
            }
			

			// Decoder for BatchSendEmails
            Decoders.addDecoder(clazz: BatchSendEmails.self) { (source: AnyObject) -> BatchSendEmails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BatchSendEmails()
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                instance.event_filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["event_filters"])
                instance.config = Decoders.decodeOptional(clazz: EmailActionConfig.self, source: sourceDictionary["config"])
                return instance
            }
			

			// Decoder for MailAction
            Decoders.addDecoder(clazz: MailAction.self) { (source: AnyObject) -> MailAction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MailAction()
                instance.message = Decoders.decode(clazz: String.self, source: sourceDictionary["message"]!)
                instance.variables = Decoders.decode(clazz: Dictionary.self, source: sourceDictionary["variables"]!)
                instance.fromUser = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fromUser"])
                return instance
            }
			

			// Decoder for Collection
            Decoders.addDecoder(clazz: Collection.self) { (source: AnyObject) -> Collection in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Collection()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                return instance
            }
			

			// Decoder for Event
            Decoders.addDecoder(clazz: Event.self) { (source: AnyObject) -> Event in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Event()
                instance.project = Decoders.decode(clazz: String.self, source: sourceDictionary["project"]!)
                instance.collection = Decoders.decode(clazz: String.self, source: sourceDictionary["collection"]!)
                instance.api = Decoders.decode(clazz: EventContext.self, source: sourceDictionary["api"]!)
                instance.properties = Decoders.decode(clazz: String.self, source: sourceDictionary["properties"]!)
                return instance
            }
			

			// Decoder for MaterializedView
            Decoders.addDecoder(clazz: MaterializedView.self) { (source: AnyObject) -> MaterializedView in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MaterializedView()
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.table_name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["table_name"])
                instance.query = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["query"])
                instance.update_interval = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["update_interval"])
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["options"])
                return instance
            }
			

			// Decoder for RetentionQuery
            Decoders.addDecoder(clazz: RetentionQuery.self) { (source: AnyObject) -> RetentionQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RetentionQuery()
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                instance.connector_field = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connector_field"])
                instance.first_action = Decoders.decodeOptional(clazz: RetentionAction.self, source: sourceDictionary["first_action"])
                instance.returning_action = Decoders.decodeOptional(clazz: RetentionAction.self, source: sourceDictionary["returning_action"])
                instance.dimension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dimension"])
                instance.date_unit = (sourceDictionary["date_unit"] as? String).map { RetentionQuery.Date_unit(rawValue: $0)! } 
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.endDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endDate"])
                return instance
            }
			

			// Decoder for FunnelStep
            Decoders.addDecoder(clazz: FunnelStep.self) { (source: AnyObject) -> FunnelStep in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FunnelStep()
                instance.collection = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collection"])
                instance.filterExpression = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filterExpression"])
                return instance
            }
			
        }
    }
}
